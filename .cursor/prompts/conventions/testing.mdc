---
description:
globs:
alwaysApply: false
---
# Testing Guidelines

## Test File Structure
```
src/
└── __tests__/
    ├── unit/              # Unit tests
    ├── integration/       # Integration tests
    └── e2e/              # End-to-end tests
```

## Naming Conventions

1. **Test Files**
   ```
   ComponentName.test.tsx      # For component tests
   functionName.spec.ts        # For utility tests
   Feature.integration.test.ts # For integration tests
   ```

2. **Test Suites**
   ```typescript
   describe('ComponentName', () => {
     describe('feature/functionality', () => {
       it('should behave in specific way', () => {});
     });
   });
   ```

## Test Structure Pattern

```typescript
// 1. Imports
import { render, screen, fireEvent } from '@testing-library/react';
import { ComponentName } from './ComponentName';

// 2. Mocks
jest.mock('./dependencies');

// 3. Test Suite
describe('ComponentName', () => {
  // 4. Setup/Teardown
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // 5. Test Cases
  it('should render successfully', () => {
    // Arrange
    const props = {};
    
    // Act
    render(<ComponentName {...props} />);
    
    // Assert
    expect(screen.getByRole('button')).toBeInTheDocument();
  });
});
```

## Best Practices

1. **Component Testing**
   - Test user interactions
   - Verify rendered content
   - Check accessibility
   - Test error states

2. **API Testing**
   - Test success responses
   - Test error handling
   - Verify headers and status codes
   - Mock external services

3. **Mock Guidelines**
   - Mock external dependencies
   - Use meaningful mock data
   - Reset mocks between tests
   - Document complex mocks

4. **Coverage Requirements**
   - 80% minimum coverage
   - 100% for critical paths
   - Cover edge cases
   - Test error boundaries

## Common Test Patterns

1. **User Interactions**
   ```typescript
   test('handles click events', () => {
     const handleClick = jest.fn();
     render(<Button onClick={handleClick} />);
     fireEvent.click(screen.getByRole('button'));
     expect(handleClick).toHaveBeenCalled();
   });
   ```

2. **Async Operations**
   ```typescript
   test('loads data', async () => {
     render(<DataComponent />);
     expect(screen.getByText('Loading...')).toBeInTheDocument();
     await screen.findByText('Data loaded');
     expect(screen.queryByText('Loading...')).not.toBeInTheDocument();
   });
   ```

3. **Error States**
   ```typescript
   test('handles errors', async () => {
     server.use(
       rest.get('/api/data', (req, res, ctx) => {
         return res(ctx.status(500));
       })
     );
     render(<DataComponent />);
     await screen.findByText('Error loading data');
   });
   ```

## Documentation Requirements

1. **Test Description**
   - Clear test names
   - Document test data
   - Explain complex scenarios

2. **Setup Instructions**
   - Document test environment
   - List required mocks
   - Explain custom matchers
