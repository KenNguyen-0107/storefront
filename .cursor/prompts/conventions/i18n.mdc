---
description:
globs:
alwaysApply: false
---
# Internationalization Guidelines

## Translation Setup

1. **Translation Provider**
   ```typescript
   // i18n/provider.tsx
   interface I18nProviderProps {
     children: React.ReactNode;
     defaultLocale?: string;
     messages: Record<string, Record<string, string>>;
   }

   export function I18nProvider({
     children,
     defaultLocale = 'en',
     messages
   }: I18nProviderProps) {
     const [locale, setLocale] = useState(defaultLocale);

     const value = useMemo(() => ({
       locale,
       setLocale,
       messages: messages[locale] || messages[defaultLocale],
       availableLocales: Object.keys(messages)
     }), [locale, messages, defaultLocale]);

     return (
       <I18nContext.Provider value={value}>
         {children}
       </I18nContext.Provider>
     );
   }
   ```

2. **Translation Hook**
   ```typescript
   // hooks/use-translation.ts
   interface TranslationOptions {
     values?: Record<string, string | number>;
     defaultValue?: string;
   }

   export function useTranslation() {
     const context = useContext(I18nContext);
     if (!context) {
       throw new Error('useTranslation must be used within I18nProvider');
     }

     const translate = useCallback((
       key: string,
       options: TranslationOptions = {}
     ) => {
       const { values, defaultValue } = options;
       let message = context.messages[key] || defaultValue || key;

       if (values) {
         Object.entries(values).forEach(([k, v]) => {
           message = message.replace(`{${k}}`, String(v));
         });
       }

       return message;
     }, [context.messages]);

     return {
       t: translate,
       locale: context.locale,
       setLocale: context.setLocale
     };
   }
   ```

## Date and Time Formatting

1. **Date Formatter**
   ```typescript
   // utils/date-formatter.ts
   interface DateFormatOptions extends Intl.DateTimeFormatOptions {
     locale?: string;
   }

   export function formatDate(
     date: Date | string | number,
     options: DateFormatOptions = {}
   ): string {
     const { locale = 'en', ...formatOptions } = options;
     
     return new Intl.DateTimeFormat(locale, {
       year: 'numeric',
       month: 'long',
       day: 'numeric',
       ...formatOptions
     }).format(new Date(date));
   }
   ```

2. **Relative Time**
   ```typescript
   // utils/relative-time.ts
   export function formatRelativeTime(
     date: Date | string | number,
     locale = 'en'
   ): string {
     const now = new Date();
     const target = new Date(date);
     const diffInSeconds = Math.floor((now.getTime() - target.getTime()) / 1000);

     const rtf = new Intl.RelativeTimeFormat(locale, {
       numeric: 'auto'
     });

     if (diffInSeconds < 60) {
       return rtf.format(-diffInSeconds, 'second');
     } else if (diffInSeconds < 3600) {
       return rtf.format(-Math.floor(diffInSeconds / 60), 'minute');
     } else if (diffInSeconds < 86400) {
       return rtf.format(-Math.floor(diffInSeconds / 3600), 'hour');
     }
     return rtf.format(-Math.floor(diffInSeconds / 86400), 'day');
   }
   ```

## Number Formatting

```typescript
// utils/number-formatter.ts
interface NumberFormatOptions extends Intl.NumberFormatOptions {
  locale?: string;
}

export function formatNumber(
  value: number,
  options: NumberFormatOptions = {}
): string {
  const { locale = 'en', ...formatOptions } = options;
  
  return new Intl.NumberFormat(locale, {
    maximumFractionDigits: 2,
    ...formatOptions
  }).format(value);
}

export function formatCurrency(
  value: number,
  currency: string,
  locale = 'en'
): string {
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency
  }).format(value);
}
```

## RTL Support

1. **RTL Context**
   ```typescript
   // contexts/rtl-context.tsx
   interface RTLProviderProps {
     children: React.ReactNode;
     defaultDirection?: 'ltr' | 'rtl';
   }

   export function RTLProvider({
     children,
     defaultDirection = 'ltr'
   }: RTLProviderProps) {
     const [direction, setDirection] = useState(defaultDirection);

     useEffect(() => {
       document.dir = direction;
     }, [direction]);

     return (
       <RTLContext.Provider value={{ direction, setDirection }}>
         {children}
       </RTLContext.Provider>
     );
   }
   ```

2. **RTL Styles**
   ```typescript
   // styles/rtl-utils.ts
   export function getMargin(
     direction: 'ltr' | 'rtl',
     side: 'start' | 'end'
   ): string {
     if (side === 'start') {
       return direction === 'ltr' ? 'margin-left' : 'margin-right';
     }
     return direction === 'ltr' ? 'margin-right' : 'margin-left';
   }

   export const rtlStyles = {
     marginStart: (value: string) => ({
       [getMargin('ltr', 'start')]: value
     }),
     marginEnd: (value: string) => ({
       [getMargin('ltr', 'end')]: value
     })
   };
   ```

## Message Format

```typescript
// utils/message-format.ts
interface MessageFormatOptions {
  locale?: string;
  values?: Record<string, any>;
}

export function formatMessage(
  message: string,
  options: MessageFormatOptions = {}
): string {
  const { locale = 'en', values = {} } = options;

  const formatter = new Intl.MessageFormat(message, locale);
  return formatter.format(values);
}

// Usage example:
const message = 'Hello {name}, you have {count, plural, =0 {no messages} one {# message} other {# messages}}';
formatMessage(message, {
  values: { name: 'John', count: 2 }
}); // "Hello John, you have 2 messages"
```

## Best Practices

1. **Translation Keys**
   - Use nested keys for organization
   - Follow consistent naming convention
   - Include context in keys
   ```typescript
   const messages = {
     common: {
       buttons: {
         submit: 'Submit',
         cancel: 'Cancel'
       }
     },
     auth: {
       login: {
         title: 'Login',
         emailLabel: 'Email'
       }
     }
   };
   ```

2. **Dynamic Content**
   - Use placeholders for variables
   - Handle pluralization
   - Support gender-based translations
   ```typescript
   const messages = {
     welcome: 'Welcome, {name}!',
     items: '{count, plural, =0 {No items} one {# item} other {# items}}',
     gender: '{gender, select, male {He} female {She} other {They}} liked this'
   };
   ```

3. **Performance**
   - Lazy load translations
   - Cache formatted results
   - Split translations by route
   ```typescript
   const loadTranslations = async (locale: string) => {
     const messages = await import(`./locales/${locale}.json`);
     return messages.default;
   };
   ```

4. **Testing**
   ```typescript
   // tests/i18n.test.tsx
   describe('Internationalization', () => {
     it('should render translated content', () => {
       const { getByText } = render(
         <I18nProvider messages={messages} defaultLocale="en">
           <Component />
         </I18nProvider>
       );
       
       expect(getByText('Welcome')).toBeInTheDocument();
     });
   });
   ```
