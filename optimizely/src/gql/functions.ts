import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentType(client: GraphQLClient, variables: Types.getContentTypeQueryVariables) : Promise<Types.getContentTypeQuery>
{
  const query = gql`query getContentType($key: String!, $version: String, $locale: [Locales!], $path: String = "-", $domain: String) { content: _Content( variation: {include: ALL} where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items: item { _metadata { types } } } }`
  return client.request<Types.getContentTypeQuery, Types.getContentTypeQueryVariables>(query, variables)
}
export function getContentByPath(client: GraphQLClient, variables: Types.getContentByPathQueryVariables) : Promise<Types.getContentByPathQuery>
{
  const query = gql`query getContentByPath($path: [String!]!, $locale: [Locales!], $siteId: String, $changeset: String = null) { content: _Content( where: {_metadata: {url: {default: {in: $path}, base: {eq: $siteId}}, changeset: {eq: $changeset}}} locale: $locale ) { total items: item { ...IContentData ...PageData ...BlankExperienceData ...ProductDetailExperienceData ...ProductListingEPageData ...SectionData } } } fragment BlankExperienceData on BlankExperience { ...ExperienceData } fragment ProductDetailExperienceData on ProductDetailExperience { SEOsettings { ...PageSeoSettingsData } ...ExperienceData } fragment ProductListingEPageData on ProductListingEPage { ...ExperienceData } fragment SectionData on Section { empty: _metadata { key } } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment PageData on _IContent { ...IContentData } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ...CompositionComponentNodeData } } } } } } ...CompositionComponentNodeData } } } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment CompositionComponentNodeData on ICompositionComponentNode { component { ...BlockData ...ElementData ...BannerItemElementData ...ButtonElementData ...CompanyData ...ContainerElementData ...ContentTextElementData ...DictionaryData ...DictionaryItemData ...ExpandableTextData ...FAQsSectionData ...HeadingElementData ...ImageBackgroundData ...ImageItemElementData ...ImageTextItemElementData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...NavigationMenuBlockFields ...OfficeLocationData ...PageSeoSettingsData ...ParagraphElementData ...ProductCardElementData ...ProductCardListElementData ...SocialMediaBlockData ...SocialMediaBlocksData ...TopHeaderContainerData ...VideoElementData ...WebFooterConfigrationBlockData ...WebHeaderConfigrationBlockData ...PDPCarouselElementData ...PDPSpecificationsElementData ...ProductCarouselElementData } } fragment BannerItemElementData on BannerItemElement { HeadingText SubHeading RichText { json html } BackgroundLink { ...LinkData } ImageDesktop { ...ReferenceData } ImageMobile { ...ReferenceData } OverlayColor OverlayOpacity Alt IsFullWidthImage Loading ButtonText ButtonLink { ...LinkData } CssClass } fragment ButtonElementData on ButtonElement { ButtonText ButtonLink { ...LinkData } className } fragment CompanyData on Company { Name Logo { ...ReferenceData } } fragment ContainerElementData on ContainerElement { Items { ...ReferenceData } TypeOfItems } fragment ContentTextElementData on ContentTextElement { HeadingText Paragraph { json html } } fragment DictionaryData on Dictionary { DictionaryItems { ...DictionaryItemPropertyData } DictionaryKey } fragment DictionaryItemData on DictionaryItem { DictionaryItemKey DictionaryItemValue } fragment ExpandableTextData on ExpandableText { ContentText { json html } Threshold ShowLessText ReadMoreText MobileThreshold } fragment FAQsSectionData on FAQsSection { HeadingText allowMultiple ListItem { ...ContentTextElementData ...HeadingElementData } } fragment HeadingElementData on HeadingElement { HeadingText } fragment ImageBackgroundData on ImageBackground { ImageDesktop { ...ReferenceData } ImageMobile { ...ReferenceData } Alt IsFullIWidthImage Loading } fragment ImageItemElementData on ImageItemElement { ImageDesktop { ...ReferenceData } ImageWidth ImageHeight ImageMobile { ...ReferenceData } ImageMobileWidth ImageMobileHeight Loading Alt IsFullWidthImage IsBackground OverlayOpacity OverlayColor } fragment ImageTextItemElementData on ImageTextItemElement { Heading { json html } RichText { json html } Image { ...ReferenceData } ImageMobile { ...ReferenceData } Alt IsFullWidthImage Loading BackgroundLink { ...LinkData } ButtonLink { ...LinkData } ButtonText ContentImagePosition CssClass } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentListItem ...NavigationMenuBlockData ...ButtonElementData ...SocialMediaBlockData ...ContentTextElementData ...SocialMediaBlocksData } ExpandableMobile } fragment NavigationMenuBlockData on NavigationMenuBlock { ...NavigationMenuBlockFields SubMenuItem { ...NavigationMenuBlockFields } } fragment NavigationMenuBlockFields on NavigationMenuBlock { ...IElementData MenuNavigationHeading Link { ...LinkItemData } ThumbnailBanner { ...ReferenceData } } fragment OfficeLocationData on OfficeLocation { OfficeTitle OfficeAddressStreet1 OfficeAddressStreet2 OfficeAddressCity OfficeAddressPostalCode OfficeAddressCountry OfficePhone OfficeEmail } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription MetaKeywords ThumbnailImage { ...ReferenceData } } fragment ParagraphElementData on ParagraphElement { text { json html } } fragment ProductCardElementData on ProductCardElement { ProductName Image { ...ReferenceData } ShortDescription { json html } InventoryStatus inventory CanBuy } fragment ProductCardListElementData on ProductCardListElement { CategoryID EnableFilter EnableSorting DefaultView EnableProductCount VisibleElements { ...ReferenceData } PagingSize } fragment SocialMediaBlockData on SocialMediaBlock { URLMedia { ...LinkPropertyData } imageIcon { ImageDesktop { ...ReferenceData } ImageWidth ImageHeight ImageMobile { ...ReferenceData } ImageMobileWidth ImageMobileHeight Loading OverlayColor OverlayOpacity Alt IsFullWidthImage IsBackground } } fragment SocialMediaBlocksData on SocialMediaBlocks { ListItems { ...SocialMediaBlockData } } fragment TopHeaderContainerData on TopHeaderContainer { description { json html } Links { ...LinkItemData } } fragment VideoElementData on VideoElement { Video { ...ReferenceData } Placeholder { ...ReferenceData } VideoUrl Autoplay PlayOnPopup Loading } fragment WebFooterConfigrationBlockData on WebFooterConfigrationBlock { SiteLogoFooter { ...ReferenceData } LogoAltText LocationDetails { json html } ButtonURLFooter { ...LinkItemData } FooterNavigation { ...IContentListItem ...MegaMenuGroupBlockData } SocialMediaArea { ...IContentListItem ...SocialMediaBlockData } CopyrightText { json html } TermsAndConditionsArea { ...LinkItemData } paymentmethodarea { ...IContentListItem ...ImageItemElementData } } fragment WebHeaderConfigrationBlockData on WebHeaderConfigrationBlock { HeaderCTA { ...LinkData } TopNavigationHeader { ...MegaMenuGroupBlockData ...TopHeaderContainerData } MainNavigationHeader { ...MegaMenuGroupBlockData } SearchBarText SiteLogoAltText SiteLogoIcon { ...ReferenceData } SiteSearchEnable } fragment PDPCarouselElementData on PDPCarouselElement { Heading { json html } CarouselSource VisibleElements { ...ReferenceData } productsofView PagingSize } fragment PDPSpecificationsElementData on PDPSpecificationsElement { empty: _metadata { key } } fragment ProductCarouselElementData on ProductCarouselElement { Heading { json html } CarouselSource CategoryID VisibleElements { ...ReferenceData } PagingSize } fragment ElementData on _IComponent { ...IElementData } fragment BlockData on _IComponent { ...IContentData } fragment LinkData on ContentUrl { type base default } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment DictionaryItemPropertyData on DictionaryItemProperty { DictionaryItemKey DictionaryItemValue } fragment IContentListItem on _IContent { ...IContentData } fragment IElementData on _IComponent { _metadata { ...IContentInfo } _type: __typename } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkPropertyData on Link { url { ...LinkData } title text target }`
  return client.request<Types.getContentByPathQuery, Types.getContentByPathQueryVariables>(query, variables)
}
export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String = "-", $domain: String, $changeset: String) { content: _Content( variation: {include: ALL} where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {default: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}], _metadata: {changeset: {eq: $changeset}}} locale: $locale ) { total items: item { ...IContentData ...BlockData ...PageData ...BannerItemElementData ...ButtonElementData ...CompanyData ...ContainerElementData ...ContentTextElementData ...DictionaryData ...DictionaryItemData ...ExpandableTextData ...FAQsSectionData ...HeadingElementData ...ImageBackgroundData ...ImageItemElementData ...ImageTextItemElementData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...NavigationMenuBlockFields ...OfficeLocationData ...PageSeoSettingsData ...ParagraphElementData ...ProductCardElementData ...ProductCardListElementData ...SocialMediaBlockData ...SocialMediaBlocksData ...TopHeaderContainerData ...VideoElementData ...WebFooterConfigrationBlockData ...WebHeaderConfigrationBlockData ...PDPCarouselElementData ...PDPSpecificationsElementData ...ProductCarouselElementData ...BlankExperienceData ...ProductDetailExperienceData ...ProductListingEPageData ...SectionData } } } fragment BannerItemElementData on BannerItemElement { HeadingText SubHeading RichText { json html } BackgroundLink { ...LinkData } ImageDesktop { ...ReferenceData } ImageMobile { ...ReferenceData } OverlayColor OverlayOpacity Alt IsFullWidthImage Loading ButtonText ButtonLink { ...LinkData } CssClass } fragment ButtonElementData on ButtonElement { ButtonText ButtonLink { ...LinkData } className } fragment CompanyData on Company { Name Logo { ...ReferenceData } } fragment ContainerElementData on ContainerElement { Items { ...ReferenceData } TypeOfItems } fragment ContentTextElementData on ContentTextElement { HeadingText Paragraph { json html } } fragment DictionaryData on Dictionary { DictionaryItems { ...DictionaryItemPropertyData } DictionaryKey } fragment DictionaryItemData on DictionaryItem { DictionaryItemKey DictionaryItemValue } fragment ExpandableTextData on ExpandableText { ContentText { json html } Threshold ShowLessText ReadMoreText MobileThreshold } fragment FAQsSectionData on FAQsSection { HeadingText allowMultiple ListItem { ...ContentTextElementData ...HeadingElementData } } fragment HeadingElementData on HeadingElement { HeadingText } fragment ImageBackgroundData on ImageBackground { ImageDesktop { ...ReferenceData } ImageMobile { ...ReferenceData } Alt IsFullIWidthImage Loading } fragment ImageItemElementData on ImageItemElement { ImageDesktop { ...ReferenceData } ImageWidth ImageHeight ImageMobile { ...ReferenceData } ImageMobileWidth ImageMobileHeight Loading Alt IsFullWidthImage IsBackground OverlayOpacity OverlayColor } fragment ImageTextItemElementData on ImageTextItemElement { Heading { json html } RichText { json html } Image { ...ReferenceData } ImageMobile { ...ReferenceData } Alt IsFullWidthImage Loading BackgroundLink { ...LinkData } ButtonLink { ...LinkData } ButtonText ContentImagePosition CssClass } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentListItem ...NavigationMenuBlockData ...ButtonElementData ...SocialMediaBlockData ...ContentTextElementData ...SocialMediaBlocksData } ExpandableMobile } fragment NavigationMenuBlockData on NavigationMenuBlock { ...NavigationMenuBlockFields SubMenuItem { ...NavigationMenuBlockFields } } fragment NavigationMenuBlockFields on NavigationMenuBlock { ...IElementData MenuNavigationHeading Link { ...LinkItemData } ThumbnailBanner { ...ReferenceData } } fragment OfficeLocationData on OfficeLocation { OfficeTitle OfficeAddressStreet1 OfficeAddressStreet2 OfficeAddressCity OfficeAddressPostalCode OfficeAddressCountry OfficePhone OfficeEmail } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription MetaKeywords ThumbnailImage { ...ReferenceData } } fragment ParagraphElementData on ParagraphElement { text { json html } } fragment ProductCardElementData on ProductCardElement { ProductName Image { ...ReferenceData } ShortDescription { json html } InventoryStatus inventory CanBuy } fragment ProductCardListElementData on ProductCardListElement { CategoryID EnableFilter EnableSorting DefaultView EnableProductCount VisibleElements { ...ReferenceData } PagingSize } fragment SocialMediaBlockData on SocialMediaBlock { URLMedia { ...LinkPropertyData } imageIcon { ImageDesktop { ...ReferenceData } ImageWidth ImageHeight ImageMobile { ...ReferenceData } ImageMobileWidth ImageMobileHeight Loading OverlayColor OverlayOpacity Alt IsFullWidthImage IsBackground } } fragment SocialMediaBlocksData on SocialMediaBlocks { ListItems { ...SocialMediaBlockData } } fragment TopHeaderContainerData on TopHeaderContainer { description { json html } Links { ...LinkItemData } } fragment VideoElementData on VideoElement { Video { ...ReferenceData } Placeholder { ...ReferenceData } VideoUrl Autoplay PlayOnPopup Loading } fragment WebFooterConfigrationBlockData on WebFooterConfigrationBlock { SiteLogoFooter { ...ReferenceData } LogoAltText LocationDetails { json html } ButtonURLFooter { ...LinkItemData } FooterNavigation { ...IContentListItem ...MegaMenuGroupBlockData } SocialMediaArea { ...IContentListItem ...SocialMediaBlockData } CopyrightText { json html } TermsAndConditionsArea { ...LinkItemData } paymentmethodarea { ...IContentListItem ...ImageItemElementData } } fragment WebHeaderConfigrationBlockData on WebHeaderConfigrationBlock { HeaderCTA { ...LinkData } TopNavigationHeader { ...MegaMenuGroupBlockData ...TopHeaderContainerData } MainNavigationHeader { ...MegaMenuGroupBlockData } SearchBarText SiteLogoAltText SiteLogoIcon { ...ReferenceData } SiteSearchEnable } fragment BlankExperienceData on BlankExperience { ...ExperienceData } fragment ProductDetailExperienceData on ProductDetailExperience { SEOsettings { ...PageSeoSettingsData } ...ExperienceData } fragment ProductListingEPageData on ProductListingEPage { ...ExperienceData } fragment SectionData on Section { empty: _metadata { key } } fragment PDPCarouselElementData on PDPCarouselElement { Heading { json html } CarouselSource VisibleElements { ...ReferenceData } productsofView PagingSize } fragment PDPSpecificationsElementData on PDPSpecificationsElement { empty: _metadata { key } } fragment ProductCarouselElementData on ProductCarouselElement { Heading { json html } CarouselSource CategoryID VisibleElements { ...ReferenceData } PagingSize } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment BlockData on _IComponent { ...IContentData } fragment PageData on _IContent { ...IContentData } fragment LinkData on ContentUrl { type base default } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment DictionaryItemPropertyData on DictionaryItemProperty { DictionaryItemKey DictionaryItemValue } fragment IContentListItem on _IContent { ...IContentData } fragment IElementData on _IComponent { _metadata { ...IContentInfo } _type: __typename } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkPropertyData on Link { url { ...LinkData } title text target } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ...CompositionComponentNodeData } } } } } } ...CompositionComponentNodeData } } } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment CompositionComponentNodeData on ICompositionComponentNode { component { ...BlockData ...ElementData ...BannerItemElementData ...ButtonElementData ...CompanyData ...ContainerElementData ...ContentTextElementData ...DictionaryData ...DictionaryItemData ...ExpandableTextData ...FAQsSectionData ...HeadingElementData ...ImageBackgroundData ...ImageItemElementData ...ImageTextItemElementData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...NavigationMenuBlockFields ...OfficeLocationData ...PageSeoSettingsData ...ParagraphElementData ...ProductCardElementData ...ProductCardListElementData ...SocialMediaBlockData ...SocialMediaBlocksData ...TopHeaderContainerData ...VideoElementData ...WebFooterConfigrationBlockData ...WebHeaderConfigrationBlockData ...PDPCarouselElementData ...PDPSpecificationsElementData ...ProductCarouselElementData } } fragment ElementData on _IComponent { ...IElementData }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}

