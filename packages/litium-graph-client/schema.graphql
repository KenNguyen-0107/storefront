schema {
  query: StorefrontQuery
  mutation: StorefrontMutation
}

"""
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types,
fields, and arguments. Static analysis can use these weights when calculating
the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every
  appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""
The purpose of the `@listSize` directive is to either inform the static analysis
about the size of returned lists (if that information is statically available),
or to point the analysis to where to find that information.
"""
directive @listSize(
  """
  The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field.
  """
  assumedSize: Int

  """
  The `slicingArguments` argument can be used to define which of the field's
  arguments with numeric type are slicing arguments, so that their value
  determines the size of the list returned by that field. It may specify a list
  of multiple slicing arguments.
  """
  slicingArguments: [String!]

  """
  The `sizedFields` argument can be used to define that the value of the
  `assumedSize` argument or of a slicing argument does not affect the size of a
  list returned by a field itself, but that of a list returned by one of its sub-fields.
  """
  sizedFields: [String!]

  """
  The `requireOneSlicingArgument` argument can be used to inform the static
  analysis that it should expect that exactly one of the defined slicing
  arguments is present in a query. If that is not the case (i.e., if none or
  multiple slicing arguments are present), the static analysis may throw an error.
  """
  requireOneSlicingArgument: Boolean! = true
) on FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

type _systemPerson implements Node & IPersonItem {
  """Global Unique Id."""
  id: ID!

  """Organizations connected to the person."""
  organizations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrganizationConnection

  """Addresses connected to the person."""
  addresses: [CustomerAddress!]!

  """Customer number for the person."""
  customerNumber: String!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type AcceleratorWebsiteWebsite implements Node & IWebsiteItem {
  """Global Unique Id."""
  id: ID!

  """Website texts"""
  texts(
    """Filter website texts."""
    filter: FilterInput
  ): [WebsiteText!]

  """The field data."""
  fields: AcceleratorWebsiteWebsiteFieldContainer!

  """The blocks for the website type."""
  blocks: AcceleratorWebsiteWebsiteBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type AcceleratorWebsiteWebsiteBlockContainer {
  """The blocks for footer."""
  footer: [IBlock]!

  """The blocks for MainMenu."""
  mainMenu: [IBlock]!

  """The blocks for TopHeader."""
  topHeader: [IBlock]!

  """The blocks for SecondHeader."""
  secondHeader: [IBlock]!
}

type AcceleratorWebsiteWebsiteFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  companyAddress: [CompanyAddressWebsiteFieldDefinition!]

  """Logotype (main)"""
  logotypeMain: PointerMediaImageItem

  """Icon"""
  _icon: PointerMediaImageItem

  """Checkout page"""
  checkoutPage: [PointerPageItem!]

  """Login page"""
  loginPage: [PointerPageItem!]

  """My pages page"""
  myPagesPage: [PointerPageItem!]

  """Header"""
  footerHeader: String

  """Column header"""
  megaMenuColumnHeader: String

  """Additional header links"""
  additionalHeaderLinks: [PointerPageItem!]

  """Header layout"""
  headerLayout: [TextOptionDefinition!]

  """Search result page"""
  searchResultPage: [PointerPageItem!]

  """Product filters"""
  productFilterFields: [PointerProductFieldItem!]

  """Order confirmation page"""
  orderConfirmationPage: [PointerPageItem!]

  """Order page"""
  orderPage: [PointerPageItem!]

  """Page not found (404)"""
  pageNotFound: [PointerPageItem!]

  """Forbidden page (403)"""
  forbiddenPage: [PointerPageItem!]

  """General error (500)"""
  generalError: [PointerPageItem!]
}

input AddDiscountCodesToCartInput {
  codes: [String!]!
}

type AddDiscountCodesToCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

"""Additional info."""
type AdditionalInfo {
  """Additional info key."""
  key: String!

  """Additional info value."""
  value: String!
}

"""Additional info."""
input AdditionalInfoInput {
  """Additional info key."""
  key: String!

  """Additional info value."""
  value: String!
}

input AddVariantToCartInput {
  articleNumber: String!
  quantity: Decimal = 1

  """
  Add the variant as new row instead of updating quantity on existing.
  
  If the cart already contains multiple rows for the same variant, then we will always add a new row.
  To update an existing row, use the updateVariantInCart mutation.
  """
  asNewRow: Boolean = false
  additionalInfo: [KeyValuePairOfStringAndStringInput!]
}

type AddVariantToCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

"""Defines when a policy shall be executed."""
enum ApplyPolicy {
  """Before the resolver was executed."""
  BEFORE_RESOLVER

  """After the resolver was executed."""
  AFTER_RESOLVER

  """The policy is applied in the validation step before the execution."""
  VALIDATION
}

union ApproveOrderForOrganizationError = Forbidden | Failure

input ApproveOrderForOrganizationInput {
  """Order identifier."""
  orderId: ID!
}

type ApproveOrderForOrganizationPayload {
  boolean: Boolean
  errors: [ApproveOrderForOrganizationError!]
  query: StorefrontQuery!
}

type ArticlePage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: ArticlePageFieldContainer!

  """The blocks for the page type."""
  blocks: ArticlePageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ArticlePageBlockContainer {
  """The blocks for Top."""
  top: [IBlock]!

  """The blocks for Content."""
  content: [IBlock]!
}

type ArticlePageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Show navigation"""
  showNavigation: Boolean

  """Title"""
  title: String

  """Introduction"""
  introduction: String

  """Text"""
  editor: String
}

"""Authentication result."""
interface authentication {
  """Provides access to the current logged in person information."""
  me: CurrentUser!
}

"""Authentication result for cookie sign in."""
type AuthenticationCookie implements authentication {
  """Provides access to the current logged in person information."""
  me: CurrentUser!

  """
  Cookie name. For chunked cookies the name is used to prefix the chunked cookie value.
  """
  cookieName: String!

  """Token issued at."""
  issuedAt: DateTime!

  """Token exires in (seconds)."""
  expiresIn: Int!
}

"""Authentication failure."""
type AuthenticationFailure implements Error {
  """Failure message."""
  message: String!

  """Failure type."""
  type: AuthenticationFailureType!
}

"""Authentication failure type."""
enum AuthenticationFailureType {
  """Sign in failed."""
  FAILURE

  """User is locked out."""
  LOCKED_OUT

  """Requires that password is changed."""
  REQUIRES_CHANGED_PASSWORD

  """Provided password does not meet the password complixity."""
  PASSWORD_COMPLEXITY
}

"""Authentication result types."""
enum AuthenticationResultType {
  """Authentication should be of result type cookie."""
  COOKIE

  """Authentication should be of result type token."""
  TOKEN
}

"""Authentication result for token sign in."""
type AuthenticationToken implements authentication {
  """Provides access to the current logged in person information."""
  me: CurrentUser!

  """Username."""
  username: String!

  """Token."""
  token: String!

  """Token type."""
  tokenType: String!

  """Authentication scheme."""
  authenticationScheme: String!

  """Token issued at."""
  issuedAt: DateTime!

  """Token exires in (seconds)."""
  expiresIn: Int!
}

"""Authorization error."""
type AuthorizationError {
  """Query data when user are unauthorized for the URL."""
  query: StorefrontQuery

  """Message"""
  message: String!
}

type B2BPersonTemplatePerson implements Node & IPersonItem {
  """Global Unique Id."""
  id: ID!

  """Organizations connected to the person."""
  organizations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrganizationConnection

  """Addresses connected to the person."""
  addresses: [CustomerAddress!]!

  """Customer number for the person."""
  customerNumber: String!

  """The field data."""
  fields: B2BPersonTemplatePersonFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type B2BPersonTemplatePersonFieldContainer {
  """First name"""
  _firstName: String

  """Last name"""
  _lastName: String

  """Email"""
  _email: String
}

type B2CPersonTemplatePerson implements Node & IPersonItem {
  """Global Unique Id."""
  id: ID!

  """Organizations connected to the person."""
  organizations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrganizationConnection

  """Addresses connected to the person."""
  addresses: [CustomerAddress!]!

  """Customer number for the person."""
  customerNumber: String!

  """The field data."""
  fields: B2CPersonTemplatePersonFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type B2CPersonTemplatePersonFieldContainer {
  """First name"""
  _firstName: String

  """Last name"""
  _lastName: String

  """Email"""
  _email: String
}

type BackgroundImageBlockFieldDefinition {
  """Translation missing"""
  image: PointerMediaImageItem

  """Translation missing"""
  imageAltText: String

  """Translation missing"""
  imageMobile: PointerMediaImageItem

  """Translation missing"""
  imageWidth: String

  """Translation missing"""
  imageHeight: String

  """Translation missing"""
  cssClass: String

  """Translation missing"""
  isFullWidthImage: Boolean

  """Translation missing"""
  imageMobileHeight: String

  """Translation missing"""
  imageMobileWidth: String
}

type BackgroundImageBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  backgroundImageBlockFieldValues: [BackgroundImageBlockFieldDefinition!]
}

type BannerBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: BannerBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type BannerBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  backgroundColorOpacity: Decimal

  """Translation missing"""
  backgroundColorHex: String

  """Banners"""
  banners: [BannersBlockFieldDefinition!]
}

type BannerItemBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: BannerItemBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: BannerItemBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type BannerItemBlockFieldContainer {
  """Name"""
  _name: String

  """RichText"""
  richText: String

  """Translation missing"""
  backgroundLink: LinkFieldDefinition

  """Translation missing"""
  button: [ButtonBlockFieldDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  blockHeight: Int

  """Translation missing"""
  backgroundColorOverlay: String

  """Translation missing"""
  backgroundColorOverlayOpacity: Decimal

  """Translation missing"""
  contentImage: [ContentImageBlockFieldDefinition!]

  """Translation missing"""
  loading: [TextOptionDefinition!]
}

type BannerItemBlockFieldDefinition {
  """RichText"""
  richText: String

  """Translation missing"""
  backgroundLink: LinkFieldDefinition

  """Translation missing"""
  blockHeight: Int

  """Translation missing"""
  backgroundColorOverlay: String

  """Translation missing"""
  backgroundColorOverlayOpacity: Decimal

  """Translation missing"""
  loading: [TextOptionDefinition!]

  """Translation missing"""
  buttonLink: LinkFieldDefinition

  """ButtonType"""
  buttonType: [TextOptionDefinition!]

  """Translation missing"""
  image: PointerMediaImageItem

  """Translation missing"""
  imageMobile: PointerMediaImageItem

  """Translation missing"""
  imageAltText: String

  """Translation missing"""
  isFullWidthImage: Boolean

  """Translation missing"""
  cssClass: String
}

type BannerItemBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type BannerItemBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  bannerItemBlockFieldValues: [BannerItemBlockFieldDefinition!]
}

type BannersBlockFieldDefinition {
  """Link text"""
  linkText: String

  """Image"""
  blockImagePointer: PointerMediaImageItem

  """Link to category"""
  bannerLinkToCategory: [PointerProductCategoryItem!]

  """Link to page"""
  bannerLinkToPage: [PointerPageItem!]

  """Link to product"""
  bannerLinkToProduct: [PointerProductItem!]

  """Call to action text"""
  actionText: String

  """Title"""
  blockTitle: String

  """RichText"""
  richText: String

  """Translation missing"""
  subTitle: String

  """Translation missing"""
  imageAltText: String

  """Translation missing"""
  image: PointerMediaImageItem

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  backgroundColorOpacity: Decimal
}

type BannersBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  bannersBlockFieldValues: [BannersBlockFieldDefinition!]
}

"""Match information in related blocks."""
input BlockQueryInput {
  """Match item based on any field that is marked as searchable."""
  content: StringFieldTermInput
}

"""Boolean container."""
input BoolContainerOfCategorySearchQueryItemAndStorefrontCategoryDocumentInput {
  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfCategorySearchQueryItemAndStorefrontCategoryDocumentInput
}

"""Boolean container."""
input BoolContainerOfPageSearchQueryAndStorefrontPageDocumentInput {
  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfPageSearchQueryAndStorefrontPageDocumentInput
}

"""Boolean container."""
input BoolContainerOfProductSearchQueryItemAndStorefrontProductDocumentInput {
  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfProductSearchQueryItemAndStorefrontProductDocumentInput
}

type BooleanValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  booleanValue: Boolean
}

"""Match information inside boolean field."""
input BooleanValueItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!

  """Value to match."""
  value: Boolean

  """Boost hits on match."""
  boost: Float
}

"""Configure the boolean container."""
input BoolQueryOfCategorySearchQueryItemAndStorefrontCategoryDocumentInput {
  """Must."""
  must: [CategorySearchQueryItemInput!]

  """Must not."""
  mustNot: [CategorySearchQueryItemInput!]

  """Should."""
  should: [CategorySearchQueryItemInput!]

  """Filter that are used for the query but excluded for score calculation."""
  filter: [BoolContainerOfCategorySearchQueryItemAndStorefrontCategoryDocumentInput!]
}

"""Configure the boolean container."""
input BoolQueryOfPageSearchQueryAndStorefrontPageDocumentInput {
  """Must."""
  must: [PageSearchQueryInput!]

  """Must not."""
  mustNot: [PageSearchQueryInput!]

  """Should."""
  should: [PageSearchQueryInput!]

  """Filter that are used for the query but excluded for score calculation."""
  filter: [BoolContainerOfPageSearchQueryAndStorefrontPageDocumentInput!]
}

"""Configure the boolean container."""
input BoolQueryOfProductSearchQueryItemAndStorefrontProductDocumentInput {
  """Must."""
  must: [ProductSearchQueryItemInput!]

  """Must not."""
  mustNot: [ProductSearchQueryItemInput!]

  """Should."""
  should: [ProductSearchQueryItemInput!]

  """Filter that are used for the query but excluded for score calculation."""
  filter: [BoolContainerOfProductSearchQueryItemAndStorefrontProductDocumentInput!]
}

type BrandBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: BrandBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type BrandBlockFieldContainer {
  """Name"""
  _name: String

  """Title"""
  blockTitle: String

  """Brands"""
  brandsLinkList: [PointerPageItem!]

  """Link text"""
  linkText: String

  """Link"""
  link: [PointerPageItem!]
}

type BrandListPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: BrandListPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type BrandListPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  titleFilterSelector: String
}

type BrandPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: BrandPageFieldContainer!

  """The blocks for the page type."""
  blocks: BrandPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type BrandPageBlockContainer {
  """The blocks for Header."""
  header: [IBlock]!
}

type BrandPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """Image"""
  image: PointerMediaImageItem

  """Text"""
  text: String
}

type ButtonBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ButtonBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ButtonBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  button: [ButtonBlockFieldDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]
}

type ButtonBlockFieldDefinition {
  """Translation missing"""
  buttonLink: LinkFieldDefinition

  """ButtonType"""
  buttonType: [TextOptionDefinition!]

  """Translation missing"""
  cssClass: String
}

type ButtonBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  buttonBlockFieldValues: [ButtonBlockFieldDefinition!]
}

type Cart {
  """Cart rows."""
  rows: [OrderRow!]!

  """Country selected for shipping."""
  country: Country!

  """Currency for the cart."""
  currency: Currency!

  """Discount codes."""
  discountCodes: [String!]!

  """Discount information."""
  discountInfos: [DiscountInfo!]!

  """Show prices including VAT."""
  showPricesIncludingVat: Boolean!

  """Product total including VAT."""
  productTotalIncludingVat: Decimal!

  """Product total excluding VAT."""
  productTotalExcludingVat: Decimal!

  """Shipping cost including VAT."""
  shippingCostIncludingVat: Decimal!

  """Shipping cost excluding VAT."""
  shippingCostExcludingVat: Decimal!

  """Total fee including VAT."""
  totalFeesIncludingVat: Decimal!

  """Total fee excluding VAT."""
  totalFeesExcludingVat: Decimal!

  """Total promotions and discounts including VAT."""
  totalPromotionsAndDiscountsIncludingVat: Decimal!

  """Total promotions and discounts excluding VAT."""
  totalPromotionsAndDiscountsExcludingVat: Decimal!

  """Grand total (includes VAT)"""
  grandTotal: Decimal!

  """Total VAT."""
  totalVat: Decimal!

  """Product count in cart."""
  productCount: Decimal!

  """List of gift cards."""
  giftCards: [String!]!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge!]

  """A flattened list of the nodes."""
  nodes: [ICategoryItem!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ICategoryItem!
}

"""Product search category query item."""
input CategoryFieldInput {
  """Category id."""
  categoryId: ID!

  """Boost hits on this category."""
  boost: Float

  """Include child categories."""
  includeChildren: Boolean
}

"""A connection to a list of items."""
type CategoryItemsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryItemsEdge!]

  """A flattened list of the nodes."""
  nodes: [CategorySearchResultItem]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CategoryItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CategorySearchResultItem
}

"""A connection to a list of items."""
type CategoryOrProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryOrProductEdge!]

  """A flattened list of the nodes."""
  nodes: [ICategoryOrProduct!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CategoryOrProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ICategoryOrProduct!
}

type CategoryProductCategory implements Node & ITemplateInfo & ICategoryItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategoryConnection

  """The field data."""
  fields: CategoryProductCategoryFieldContainer!

  """The blocks for the category type."""
  blocks: CategoryProductCategoryBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!

  """The relationships for product or category."""
  relationships: CategoryProductCategoryRelationships!

  """The relationships for product or category."""
  relations(
    """Filter relationship."""
    filter: RelationshipFilterInput
  ): [Relationship!]!
}

type CategoryProductCategoryBlockContainer {
  """The blocks for Top."""
  top: [IBlock]!
}

type CategoryProductCategoryFieldContainer {
  """Name"""
  _name: String

  """Description"""
  _description: String

  """Url"""
  _url: String

  """Search engine optimized title"""
  _seoTitle: String

  """Search engine optimized description"""
  _seoDescription: String
}

type CategoryProductCategoryRelationships {
  accessory: Relationship!
  similarProducts: Relationship!
}

"""A connection to a list of items."""
type CategorySearchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategorySearchEdge!]

  """A flattened list of the nodes."""
  nodes: [ICategoryItem!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CategorySearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ICategoryItem!

  """The search score."""
  score: Float
}

"""Category search query item."""
input CategorySearchQueryInput {
  """Match item based on category."""
  category: CategoryFieldInput

  """Match item based on any field that is marked as searchable."""
  content: StringFieldTermInput

  """Match item based on name."""
  name: NgramStringFieldTermInput

  """Match item based on block data."""
  block: BlockQueryInput

  """Match item based on field that is marked as searchable."""
  field: SearchFieldItemInput

  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfCategorySearchQueryItemAndStorefrontCategoryDocumentInput
}

"""Category search query item."""
input CategorySearchQueryItemInput {
  """Match item based on any field that is marked as searchable."""
  content: StringFieldTermInput

  """Match item based on name."""
  name: NgramStringFieldTermInput

  """Match item based on block data."""
  block: BlockQueryInput

  """Match item based on field that is marked as searchable."""
  field: SearchFieldItemInput

  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfCategorySearchQueryItemAndStorefrontCategoryDocumentInput
}

type CategorySearchResultContext {
  categoryItems(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategoryItemsConnection

  """The sort criterias"""
  sortCriteria: [SortResultItem!]!
}

type CategorySearchResultItem {
  data: ICategoryItem
  id: UUID!
  score: Float!
}

union ChangeMyEmailError = Failure | Forbidden | ValidationError

input ChangeMyEmailInput {
  """The notification url that will be called when email is changed."""
  notificationUrl: String!

  """The token returned by changeMyEmailVerification notification."""
  token: String!

  """The verification token notified in changeMyEmailVerification."""
  verificationToken: String!
}

type ChangeMyEmailPayload {
  me: IPersonItem
  errors: [ChangeMyEmailError!]
  query: StorefrontQuery!
}

union ChangeMyEmailVerificationError = Failure | Forbidden | ValidationError

input ChangeMyEmailVerificationInput {
  """The new email for the user."""
  email: String!

  """The notification url that will be called for verification."""
  notificationUrl: String!
}

type ChangeMyEmailVerificationPayload {
  token: String
  errors: [ChangeMyEmailVerificationError!]
  query: StorefrontQuery!
}

union ChangeMyPasswordError = Failure | Forbidden | ValidationError

input ChangeMyPasswordInput {
  """The current password for the user."""
  currentPassword: String!

  """The new password for the user."""
  password: String!

  """The notification url that will be called when password is changed."""
  notificationUrl: String!
}

type ChangeMyPasswordPayload {
  boolean: Boolean
  errors: [ChangeMyPasswordError!]
  query: StorefrontQuery!
}

"""Container for analytics settings for the channel."""
type ChannelAnalysisSetting {
  """Google Tag Manager Container ID for the channel."""
  googleTagManager: String

  """Google Analytics 4 Measurement ID for the channel."""
  googleAnalytics4: String
}

"""Represents a checkout."""
type Checkout {
  """Shipping options available."""
  shippingOptions: [ShippingOption!]!

  """Paymet options available."""
  paymentOptions: [PaymentOption!]!

  """Payment HTML snippet from payment provider."""
  paymentHtmlSnippet: String

  """Shipment HTML snippet from shipping provider."""
  shipmentHtmlSnippet: String

  """Customer details."""
  customerDetails: OrderCustomerDetails!

  """Billing address."""
  billingAddress: OrderAddress!

  """Shipping address."""
  shippingAddress: OrderAddress!

  """Order note."""
  note: String

  """Additional order info."""
  additionalInfo: [AdditionalInfo!]!

  """Additional shipping info."""
  additionalShippingInfo: [AdditionalInfo!]!

  """Checkout flow info."""
  checkoutFlowInfo: CheckoutFlowInfo

  """Notification urls."""
  notifications: NotificationType!

  """Delivery options."""
  deliveryOptions: [DeliveryOptionGroup!]
}

"""Represents a checkout flow info."""
type CheckoutFlowInfo {
  """Checkout page url."""
  checkoutPageUrl: String!

  """Recipt page url."""
  receiptPageUrl: String!

  """Cancel page url."""
  cancelPageUrl: String!

  """Terms page url."""
  termUrl: String

  """Enable separate shipping address in IFRAME_CHECKOUT."""
  allowSeparateShippingAddress: Boolean

  """Customer type."""
  customerType: CustomerType

  """Shipping tags."""
  shippingTags: [String!]

  """Disable shipping options in IFRAME_CHECKOUT."""
  disablePaymentShippingOptions: Boolean

  """Additional checkout flow info."""
  additionalInfo: [AdditionalInfo!]
}

"""Represents a checkout flow info."""
input CheckoutFlowInfoInput {
  """Checkout page url."""
  checkoutPageUrl: String!

  """Recipt page url."""
  receiptPageUrl: String!

  """Cancel page url."""
  cancelPageUrl: String!

  """Terms page url."""
  termUrl: String

  """Enable separate shipping address in IFRAME_CHECKOUT."""
  allowSeparateShippingAddress: Boolean

  """Customer type."""
  customerType: CustomerType

  """Shipping tags."""
  shippingTags: [String!]

  """Disable shipping options in IFRAME_CHECKOUT."""
  disablePaymentShippingOptions: Boolean

  """Additional checkout flow info."""
  additionalInfo: [AdditionalInfoInput!]
}

type CheckoutPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: CheckoutPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type CheckoutPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type ClearCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

type ColumnBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ColumnBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: ColumnBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ColumnBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  numberOfItemOnDesktop: Decimal

  """Translation missing"""
  numberOfItemOnMobile: Decimal

  """Translation missing"""
  widthOptionDesktop: [TextOptionDefinition!]

  """Translation missing"""
  widthOptionMobile: [TextOptionDefinition!]

  """Translation missing"""
  blockHeight: Int

  """Translation missing"""
  contentSpaceX: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceXDesktop: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceY: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceYDesktop: [IntOptionDefinition!]
}

type ColumnBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type CommonStylesBlockFieldDefinition {
  """Translation missing"""
  cssClass: String

  """Translation missing"""
  textAlign: [TextOptionDefinition!]

  """Translation missing"""
  verticalAlign: [TextOptionDefinition!]

  """Translation missing"""
  paddingTop: [IntOptionDefinition!]

  """Translation missing"""
  paddingLeft: [IntOptionDefinition!]

  """Translation missing"""
  paddingBottom: [IntOptionDefinition!]

  """Translation missing"""
  paddingRight: [IntOptionDefinition!]

  """Translation missing"""
  marginTop: [IntOptionDefinition!]

  """Translation missing"""
  marginLeft: [IntOptionDefinition!]

  """Translation missing"""
  marginBottom: [IntOptionDefinition!]

  """Translation missing"""
  marginRight: [IntOptionDefinition!]

  """Translation missing"""
  textAlignDesktop: [TextOptionDefinition!]

  """Translation missing"""
  verticalAlignDesktop: [TextOptionDefinition!]

  """Translation missing"""
  paddingTopDesktop: [IntOptionDefinition!]

  """Translation missing"""
  paddingLeftDesktop: [IntOptionDefinition!]

  """Translation missing"""
  paddingBottomDesktop: [IntOptionDefinition!]

  """Translation missing"""
  paddingRightDesktop: [IntOptionDefinition!]

  """Translation missing"""
  marginTopDesktop: [IntOptionDefinition!]

  """Translation missing"""
  marginLeftDesktop: [IntOptionDefinition!]

  """Translation missing"""
  marginBottomDesktop: [IntOptionDefinition!]

  """Translation missing"""
  marginRightDesktop: [IntOptionDefinition!]
}

type CommonStylesBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  commonStylesBlockFieldValues: [CommonStylesBlockFieldDefinition!]
}

type CompanyAddressWebsiteFieldDefinition {
  """Translation missing"""
  companyName: String

  """Translation missing"""
  companyDescription: String

  """Translation missing"""
  address1: String

  """Translation missing"""
  address2: String

  """Translation missing"""
  city: [TextOptionDefinition!]

  """Translation missing"""
  state: String

  """Translation missing"""
  postCode: String

  """Translation missing"""
  country: [TextOptionDefinition!]

  """Translation missing"""
  phoneNumber: String
}

type CompanyAddressWebsiteFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  companyAddressWebsiteFieldValues: [CompanyAddressWebsiteFieldDefinition!]
}

"""A connection to a list of items."""
type ContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContentEdge!]

  """A flattened list of the nodes."""
  nodes: [IContent!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ContentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IContent!
}

type ContentImageBlockFieldDefinition {
  """Translation missing"""
  image: PointerMediaImageItem

  """Translation missing"""
  imageAltText: String

  """Translation missing"""
  imageHeight: String

  """Translation missing"""
  imageWidth: String

  """Translation missing"""
  imageMobile: PointerMediaImageItem

  """Translation missing"""
  cssClass: String

  """Translation missing"""
  isFullWidthImage: Boolean

  """Translation missing"""
  imageMobileHeight: String

  """Translation missing"""
  imageMobileWidth: String

  """Translation missing"""
  loading: [TextOptionDefinition!]
}

type ContentImageBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  contentImageBlockFieldValues: [ContentImageBlockFieldDefinition!]
}

"""Represents a country."""
type Country {
  """Currency for the country."""
  currency: Currency!

  """Country name."""
  name: String!

  """Country code."""
  code: String!
}

type CreateCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

union CreateCheckoutSessionError = ValidationError

input CreateCheckoutSessionInput {
  checkoutFlowInfo: CheckoutFlowInfoInput!
  notifications: NotificationInput
}

type CreateCheckoutSessionPayload {
  checkout: Checkout
  errors: [CreateCheckoutSessionError!]
  query: StorefrontQuery!
}

"""Culture information."""
type Culture {
  """Culture code."""
  code: String!

  """Culture native name."""
  nativeName: String!

  """Culture english name."""
  englishName: String!
}

"""Represents a currency."""
type Currency {
  """Currency name."""
  name: String!

  """Currency code."""
  code: String!

  """Minor currency unit."""
  minorCurrencyUnit: Short!

  """Currency symbol."""
  symbol: String

  """Currency symbol position."""
  symbolPosition: CurrencyPositions

  """Minor units."""
  minorUnits: Short!
}

"""Currency positions."""
enum CurrencyPositions {
  """Left position without padding."""
  LEFT

  """Left position with padding."""
  LEFT_WITH_PADDING

  """Right position without padding."""
  RIGHT

  """Right position with padding."""
  RIGHT_WITH_PADDING
}

type CurrentUser {
  """Person for the current user."""
  person: IPersonItem!

  """Selected organization for the current user."""
  selectedOrganization: PersonOrganizationLink

  """Orders for the current user."""
  orders(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrderConnection
}

"""Represents a address."""
type CustomerAddress {
  """Global Unique Id."""
  id: ID!

  """Address type."""
  addressType: CustomerAddressType!

  """Address line 1."""
  address1: String

  """Address line 2."""
  address2: String

  """Care of."""
  careOf: String

  """City."""
  city: String

  """Country."""
  country: String

  """House extension."""
  houseExtension: String

  """House number."""
  houseNumber: String

  """State."""
  state: String

  """Phone number."""
  phoneNumber: String

  """Zip code."""
  zipCode: String
}

"""Represents a address."""
input CustomerAddressInput {
  """Address line 1."""
  address1: String

  """Address line 2."""
  address2: String

  """Care of."""
  careOf: String

  """City."""
  city: String

  """Country."""
  country: String

  """House extension."""
  houseExtension: String

  """House number."""
  houseNumber: String

  """State."""
  state: String

  """Phone number."""
  phoneNumber: String

  """Zip code."""
  zipCode: String

  """Address type."""
  addressTypeId: ID
}

"""Represents a address type."""
type CustomerAddressType implements Node {
  """Global Unique Id."""
  id: ID!

  """Address type name."""
  name: String
}

"""Represents a customer type."""
enum CustomerType {
  """Personal customer."""
  PERSON

  """Organization customer."""
  ORGANIZATION
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type DateTimeValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  dateTimeValue: DateTime
}

"""Match information inside date time field."""
input DateTimeValueItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!

  """Match values."""
  match: MatcherOfNullableOfDateTimeOffsetInput!

  """Boost hits on match."""
  boost: Float
}

"""Operational hours information."""
type DayOfWeekOperationalHours {
  """English name for the day or week."""
  englishName: String!

  """Opening time."""
  openingTime: TimeSpan

  """Closing time."""
  closingTime: TimeSpan

  """Closed."""
  closed: Boolean!
}

"""The `Decimal` scalar type represents a decimal floating-point number."""
scalar Decimal

type DecimalOptionDefinition {
  value: Decimal!
  name: String
}

type DecimalOptionFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  decimalOptionFieldValues: [DecimalOptionDefinition!]
}

type DecimalOptions {
  multiSelect: Boolean!
  items: [DecimalOptionsItem!]!
}

type DecimalOptionsItem {
  value: Decimal!
  name: String
}

type DecimalValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  decimalValue: Decimal
}

"""Match information inside nuber field."""
input DecimalValueItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!

  """Match values."""
  match: MatcherOfNullableOfDecimalInput!

  """Boost hits on match."""
  boost: Float
}

type DefaultChannelFieldTemplateChannel implements Node & IChannelItem {
  """Global Unique Id."""
  id: ID!

  """The possible delivery countries for the channel."""
  deliveryCountries: [Country!]!

  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """Culture information."""
  culture: Culture

  """Culture information for assortment."""
  assortmentCulture: Culture

  """The analytics settings for the channel."""
  analytics: ChannelAnalysisSetting!

  """Market for the channel."""
  market: IMarket

  """Website for the channel."""
  website: IWebsite

  """The field data."""
  fields: DefaultChannelFieldTemplateChannelFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type DefaultChannelFieldTemplateChannelFieldContainer {
  """Name"""
  _name: String

  """Sender email address"""
  senderEmailAddress: String
}

type DefaultMarketFieldTemplateMarket implements Node {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  fields: DefaultMarketFieldTemplateMarketFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type DefaultMarketFieldTemplateMarketFieldContainer {
  """Name"""
  _name: String
}

input DeliveryAddonInput {
  """Add on id."""
  addOnId: String!
}

"""Delivery add on information."""
type DeliveryAddOnOption {
  """Add on id."""
  addOnId: String!

  """Name."""
  name: String!

  """Description."""
  description: String

  """Price including VAT."""
  priceIncludingVat: Decimal

  """VAT rate as decimal value (between 0 and 1)."""
  vatRate: Decimal

  """Add on is preselected."""
  preselected: Boolean!

  """Add on is required."""
  required: Boolean!
}

"""Delivery date information."""
type DeliveryDate {
  """Earliest delivered at."""
  earliest: DateTime

  """Latest delivered at."""
  latest: DateTime

  """Earliest delivered at the time of day."""
  earliestTimeOfDay: TimeSpan

  """Latest delivered at the time of day."""
  latestTimeOfDay: TimeSpan

  """Cutoff date."""
  cutoff: DateTime
}

"""Delivery option information."""
type DeliveryOption {
  """Delivery option id."""
  deliveryOptionId: String!

  """Name."""
  name: String!

  """Description."""
  description: String

  """Delivery carrier id."""
  deliveryCarrierId: String

  """Delivery carrier name."""
  deliveryCarrierName: String

  """Delivery carrier service id."""
  deliveryCarrierServiceId: String

  """Delivery carrier service name."""
  deliveryCarrierServiceName: String

  """Shipping method."""
  shippingMethod: String

  """Delivery date."""
  deliveryDate: DeliveryDate

  """Time slot for delivery."""
  deliveryTimeSlots: [DeliveryTimeSlot!]

  """Price including vat."""
  priceIncludingVat: Decimal

  """VAT rate as decimal value (between 0 and 1)."""
  vatRate: Decimal

  """Add ons."""
  addOns: [DeliveryAddOnOption!]

  """Pickup locations."""
  pickupLocations: [PickupLocation!]

  """Additional info."""
  additionalInfo: [AdditionalInfo!]
}

"""Delivery option group to present for the customer."""
type DeliveryOptionGroup {
  """Shipping group id."""
  shippingGroupId: String!

  """Delivery options the customer can select between."""
  items: [DeliveryOption!]!
}

input DeliveryOptionInput {
  """Shipping group id."""
  shippingGroupId: String!

  """Delivery option id."""
  deliveryOptionId: String!

  """Pickup location id."""
  pickupLocationId: String

  """Time slot id."""
  timeSlotId: String

  """Add ons."""
  addOns: [DeliveryAddonInput!]
}

"""Delivery time slots."""
type DeliveryTimeSlot {
  """Time slot id."""
  timeSlotId: String!

  """Start the time of day."""
  start: TimeSpan!

  """End the time of day."""
  end: TimeSpan!

  """Cutoff date."""
  cutoff: DateTime
}

"""Represents a discount info."""
type DiscountInfo {
  """Description."""
  description: String

  """Describes if a product discount."""
  productDiscount: Boolean!

  """Discount type."""
  discountType: String!

  """Discount code used to activate this discount."""
  discountCode: String

  """Source order rows."""
  sourceOrderRows: [OrderRow!]!

  """Result order row."""
  resultOrderRow: OrderRow!
}

"""
The group of fields, that can be used in different areas when designing a page.
Once an area is connected to a display group, administrators can configure which
fields that should be shown in that group.
"""
type DisplayFieldGroup {
  """Field group identifier."""
  fieldGroupId: String!

  """Field group fields."""
  fields: [IFieldValueItem!]!
}

type DistinctFacet implements IFacet {
  """Facet field."""
  field: String!

  """Facet name."""
  name: String

  """Facet items."""
  items: [DistinctFacetItem!]!
}

type DistinctFacetItem {
  """Number of entities belonging to this facet."""
  count: Int!

  """Whether or not this facet was marked selected in the request."""
  selected: Boolean!

  """Gets the value of the facet."""
  value: String!

  """Gets the name of the facet."""
  name: String
}

"""Distinct facet item."""
input DistinctFacetItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!

  """Selected values."""
  selected: [String!]
}

interface Error {
  message: String!
}

type ErrorPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: ErrorPageFieldContainer!

  """The blocks for the page type."""
  blocks: ErrorPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ErrorPageBlockContainer {
  """The blocks for BlockContainer."""
  blockContainer: [IBlock]!
}

type ErrorPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """Text"""
  editor: String
}

type FacetGroupItem {
  """The facet group id."""
  id: String!

  """The facet group label."""
  label: String

  """The facet items."""
  options: [FacetItem]!

  """If single select facet group."""
  singleSelect: Boolean
}

type FacetItem {
  """Is the facet item selected."""
  selected: Boolean!

  """The facet group id."""
  id: String!

  """The facet group label."""
  label: String

  """The facet quantity."""
  quantity: Int
}

"""Failure."""
type Failure implements Error {
  """Failure message."""
  message: String!

  """Failure type."""
  type: String!
}

type FAQBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: FAQBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: FAQBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type FAQBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  loading: [TextOptionDefinition!]

  """Translation missing"""
  fAQItem: [FAQItemBlockFieldDefinition!]
}

type FAQBlockFieldGroups {
  """Field group: FAQ"""
  faq: FieldGroup!
}

type FAQItemBlockFieldDefinition {
  """RichTitle"""
  richTitle: String

  """RichText"""
  richText: String
}

type FAQItemBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  faqItemBlockFieldValues: [FAQItemBlockFieldDefinition!]
}

"""Field group storage."""
type FieldGroup {
  """Field group identifier."""
  fieldGroupId: String!

  """Field group name."""
  name: String

  """Field group fields."""
  fields: [IFieldValueItem!]!
}

"""Filter field group."""
input FieldGroupFilterInput {
  """Filter based on the field group id."""
  id: SimpleStringFilterInput
}

type FieldTypeMetadataBoolean implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataCustomerPointerOrganization implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataDate implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataDateTime implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataDecimal implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataDecimalOption implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String

  """Field metadata for fields of type DecimalOption."""
  decimalOptions: DecimalOptions
}

type FieldTypeMetadataEditor implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataFilterFields implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataInt implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataIntOption implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String

  """Field metadata for fields of type IntOption."""
  intOptions: IntOptions
}

type FieldTypeMetadataLimitedText implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataLink implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataLong implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataMediaPointerFile implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataMediaPointerImage implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataMediaPointerImageArray implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataMultiField implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String

  """Field metadata for fields of type TextOption."""
  multiFieldmultiFieldOptions: MultiFieldOptions
}

type FieldTypeMetadataMultirowText implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataObject implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataPointer implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String

  """Field metadata for fields of type Pointer."""
  pointerOptions: PointerOptions
}

type FieldTypeMetadataText implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String
}

type FieldTypeMetadataTextOption implements IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the input model that values should be assigned to when the field is modified.
  """
  inputField: String

  """Field metadata for fields of type TextOption."""
  textOptions: TextOptions
}

"""Field update error."""
type FieldUpdateError implements Error {
  """Error message."""
  message: String!
}

input FieldValueUpdateBooleanValue {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: Boolean
}

input FieldValueUpdateDateTimeValue {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: DateTime
}

input FieldValueUpdateDecimalValue {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: Decimal
}

input FieldValueUpdateDecimalValues {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: [Decimal!]
}

input FieldValueUpdateInput {
  stringValues: FieldValueUpdateStringValues
  booleanValue: FieldValueUpdateBooleanValue
  dateTimeValue: FieldValueUpdateDateTimeValue
  decimalValue: FieldValueUpdateDecimalValue
  decimalValues: FieldValueUpdateDecimalValues
  stringValue: FieldValueUpdateStringValue
  intValue: FieldValueUpdateIntValue
  intValues: FieldValueUpdateIntValues
  longValue: FieldValueUpdateLongValue
}

input FieldValueUpdateIntValue {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: Int
}

input FieldValueUpdateIntValues {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: [Int!]
}

input FieldValueUpdateLongValue {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: Long
}

input FieldValueUpdateStringValue {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: String
}

input FieldValueUpdateStringValues {
  """Global Unique Id."""
  id: ID!

  """The field data."""
  value: [String]
}

type File implements IFileItem {
  """The url of the image."""
  url: String!

  """The filename"""
  filename: String!
  alt: String
}

input FilterDataInput {
  startsWith: String
  endsWith: String
}

input FilterInput {
  """Exclude items matching the filter."""
  exclude: FilterDataInput

  """Include items matching the filter."""
  include: FilterDataInput
}

type FooterColumnBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: FooterColumnBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type FooterColumnBlockFieldContainer {
  """Name"""
  _name: String

  """NavigationLinksHeader"""
  navigationLinksHeader: LinkFieldDefinition

  """RichText"""
  richText: String
}

type FooterContainerBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: FooterContainerBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type FooterContainerBlockFieldContainer {
  """Name"""
  _name: String
}

type FooterLinksBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: FooterLinksBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type FooterLinksBlockFieldContainer {
  """Name"""
  _name: String

  """NavigationLinksHeader"""
  navigationLinksHeader: LinkFieldDefinition
}

type FooterWebsiteFieldDefinition {
  """Link list"""
  footerLinkList: [PointerPageItem!]

  """Text"""
  footerText: String

  """Title"""
  title: String
}

type FooterWebsiteFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  footerWebsiteFieldValues: [FooterWebsiteFieldDefinition!]
}

"""Forbidden."""
type Forbidden implements Error {
  """Forbidden message."""
  message: String!
}

"""Forbidden error."""
type ForbiddenError {
  """Query data when results are forbidden for the URL."""
  query: StorefrontQuery

  """Message"""
  message: String!
}

type ForgotPasswordPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: ForgotPasswordPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ForgotPasswordPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """Subject"""
  forgottenPasswordSubject: String

  """Body"""
  forgottenPasswordBody: String

  """Subject"""
  forgottenPasswordLockedSubject: String

  """Body"""
  forgottenPasswordLockedBody: String
}

"""
Configure the fuzziness. Defaults generates an edit distance based on the length of the term.
"""
input FuzzinessItemInput {
  """Generates an edit distance based on the length of the term."""
  length: FuzzinessLengthInput

  """Ratio."""
  ratio: Float

  """The maximum allowed Levenshtein Edit Distance (or number of edits)."""
  distance: Int
}

"""Configure the edit distance based on the length of the term."""
input FuzzinessLengthInput {
  """Must match exactly for terms with less length"""
  low: Int!

  """Two edits allowed for terms with greater length."""
  high: Int!
}

type GlobalBlockPreview {
  block: IBlock!
  page: IPageItem!
}

type HaColumnBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: HaColumnBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type HaColumnBlockFieldContainer {
  """Name"""
  _name: String
}

type HaRowBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: HaRowBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type HaRowBlockFieldContainer {
  """Name"""
  _name: String
}

type HeaderUserInfoBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: HeaderUserInfoBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: HeaderUserInfoBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type HeaderUserInfoBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  cssClass: String

  """Link"""
  link: [PointerPageItem!]

  """Translation missing"""
  userInfo: [Pointer!]

  """Translation missing"""
  button: [ButtonBlockFieldDefinition!]
}

type HeaderUserInfoBlockFieldDefinition {
  """Translation missing"""
  userInfo: [Pointer!]

  """Translation missing"""
  cssClass: String

  """Translation missing"""
  buttonLink: LinkFieldDefinition
}

type HeaderUserInfoBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type HeaderUserInfoBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  headerUserInfoBlockFieldValues: [HeaderUserInfoBlockFieldDefinition!]
}

type HomePage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: HomePageFieldContainer!

  """The blocks for the page type."""
  blocks: HomePageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type HomePageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type HomePageFieldContainer {
  """Name"""
  _name: String
}

union IBlock = PrimaryNavigationLinkBlock | TopHeaderContainerBlock | NavigationLinksBlock | FooterContainerBlock | ButtonBlock | FooterLinksBlock | HaRowBlock | SecondaryNavigationLinkBlock | ImageItemBlock | ProductsAndBannerBlock | HaColumnBlock | ProductBlock | BrandBlock | SubscribeBlock | RowBlock | RatingReviewItemBlock | TextImageBlockBlock | FAQBlock | TopHeaderBlock | ImageListBlock | NavigationItemBlock | ImageTextItemBlock | PrimaryNavigationColumnBlock | PrimaryNavigationBannerBlock | BannerItemBlock | SectionBlock | NavigationContainerBlock | ObjectItemBlock | BannerBlock | RichContentBlock | HeaderUserInfoBlock | ImageTextBlocksBlock | ProductsBlock | SliderBlock | PrimaryNavigationCategoriesBlock | VideoBlock | ColumnBlock | FooterColumnBlock

interface IBlockItem {
  """The block system Id"""
  systemId: UUID!
}

interface ICategoryItem {
  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategoryConnection

  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection
}

union ICategoryOrProduct = ProductWithVariantsProduct | ProductWithVariantsFurnitureProduct | ProductWithVariantsListProduct | ProductWithOneVariantProduct | CategoryProductCategory | RestrictedProductItem | RestrictedCategoryItem

union IChannel = DefaultChannelFieldTemplateChannel

interface IChannelItem {
  """Global Unique Id."""
  id: ID!

  """The possible delivery countries for the channel."""
  deliveryCountries: [Country!]!

  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """Culture information."""
  culture: Culture

  """Culture information for assortment."""
  assortmentCulture: Culture

  """The analytics settings for the channel."""
  analytics: ChannelAnalysisSetting!

  """The market for the channel."""
  market: IMarket

  """The website for the channel."""
  website: IWebsite
}

union IContent = AuthorizationError | ForbiddenError | Redirect | NotFoundError | ProductWithVariantsProduct | ProductWithVariantsFurnitureProduct | ProductWithVariantsListProduct | ProductWithOneVariantProduct | CategoryProductCategory | HomePage | SearchResultPage | WelcomeEmailPage | LoginPage | PageNotFoundPage | CheckoutPage | SiteSelectorPage | OrderHistoryPage | NewsPage | LandingPage | MyPagesPage | MyAccountDashboardPage | MyAccountOrderHistoryPage | ProductListPage | BrandPage | OrderPage | ErrorPage | OrderConfirmationPage | BrandListPage | MyAccountOrderPage | MegaMenuPage | MyAccountAddressesPage | NewsListPage | MyAccountMyProfilePage | ArticlePage | ForgotPasswordPage | MyAccountLoginDetailsPage | GlobalBlockPreview | RestrictedProductItem | RestrictedPageItem | RestrictedCategoryItem

interface IContentItem {
  """Global Unique Id."""
  id: ID!

  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection
}

"""Facet item."""
interface IFacet {
  """Facet field."""
  field: String!

  """Facet name."""
  name: String
}

interface IFieldMetadataItem {
  """Field type."""
  fieldType: String!

  """Flag indicating if the field values will be readable by the user."""
  readable: Boolean!

  """Flag indicating if the field values will be writable by the user."""
  writable: Boolean!

  """Model that will should be used when the field is modified."""
  inputModel: String

  """
  Field in the update model that values should be assigned to when the field is modified.
  """
  inputField: String
}

interface IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String

  """Field metadata."""
  fieldMetadata: IFieldMetadataItem!
}

interface IFileItem {
  """The url of the image."""
  url: String!

  """The filename"""
  filename: String!
  alt: String
}

interface IImageItem {
  """The dimension of the image."""
  dimension: Size

  """The url of the image."""
  url: String!
  alt: String
  filename: String!
}

type Image implements IImageItem {
  """The dimension of the image."""
  dimension: Size

  """The url of the image."""
  url: String!
  alt: String
  filename: String!
}

type ImageItemBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ImageItemBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ImageItemBlockFieldContainer {
  """Name"""
  _name: String

  """Navigation link"""
  navigationLink: LinkFieldDefinition

  """Translation missing"""
  contentImage: [ContentImageBlockFieldDefinition!]
}

type ImageListBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ImageListBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ImageListBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  contentSpaceX: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceXDesktop: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceY: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceYDesktop: [IntOptionDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  numberOfItemOnDesktop: Decimal

  """Translation missing"""
  numberOfItemOnMobile: Decimal
}

type ImageTextBlocksBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ImageTextBlocksBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ImageTextBlocksBlockFieldContainer {
  """Name"""
  _name: String

  """RichText"""
  richText: String

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  backgroundColorOpacity: Decimal
}

type ImageTextItemBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ImageTextItemBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: ImageTextItemBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ImageTextItemBlockFieldContainer {
  """Name"""
  _name: String

  """RichText"""
  richText: String

  """Translation missing"""
  contentImage: [ContentImageBlockFieldDefinition!]

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  button: [ButtonBlockFieldDefinition!]

  """Translation missing"""
  backgroundLink: LinkFieldDefinition

  """Translation missing"""
  contentImagePosition: [TextOptionDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  loading: [TextOptionDefinition!]
}

type ImageTextItemBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

union IMarket = DefaultMarketFieldTemplateMarket

type IntOptionDefinition {
  value: Int!
  name: String
}

type IntOptionFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  intOptionFieldValues: [IntOptionDefinition!]
}

type IntOptions {
  multiSelect: Boolean!
  items: [IntOptionsItem!]!
}

type IntOptionsItem {
  value: Int!
  name: String
}

type IntValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  intValue: Int
}

interface IOrganizationItem {
  """Global Unique Id."""
  id: ID!

  """Persons connected to the organization."""
  persons(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PersonConnection

  """Orders connected to the organization."""
  orders(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrderConnection

  """Customer number for the organization."""
  customerNumber: String!

  """Addresses connected to the organization."""
  addresses: [CustomerAddress!]!
}

interface IPageItem {
  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection
}

union IPageOrCategory = CategoryProductCategory | HomePage | SearchResultPage | WelcomeEmailPage | LoginPage | PageNotFoundPage | CheckoutPage | SiteSelectorPage | OrderHistoryPage | NewsPage | LandingPage | MyPagesPage | MyAccountDashboardPage | MyAccountOrderHistoryPage | ProductListPage | BrandPage | OrderPage | ErrorPage | OrderConfirmationPage | BrandListPage | MyAccountOrderPage | MegaMenuPage | MyAccountAddressesPage | NewsListPage | MyAccountMyProfilePage | ArticlePage | ForgotPasswordPage | MyAccountLoginDetailsPage | RestrictedPageItem | RestrictedCategoryItem

interface IPersonItem {
  """Global Unique Id."""
  id: ID!

  """Organizations connected to the person."""
  organizations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrganizationConnection

  """Customer number for the person."""
  customerNumber: String!

  """Addresses connected to the person."""
  addresses: [CustomerAddress!]!
}

interface IPointerItem {
  entitySystemId: UUID!
}

interface IProductItem {
  """Global Unique Id."""
  id: ID!

  """The article number"""
  articleNumber: String!

  """The name."""
  name: String

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """If the item is in stock."""
  inStock: Boolean! @deprecated(reason: "Use StockStatus.InStockQuantity instead.")

  """Stock status information."""
  stockStatusDescription: String @deprecated(reason: "Use StockStatus.Description instead.")

  """Stock status."""
  stockStatus: StockStatus!

  """Calculated product price."""
  price: ProductPrice

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement
  isVariant: Boolean!
}

interface IRelationshipItem {
  """The id of the relationship."""
  relationshipId: String!

  """The name of the relationship."""
  name: String

  """Get the items data for relationships."""
  items(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategoryOrProductConnection
}

interface ITemplateInfo {
  """Display template."""
  templateName: String
}

union IWebsite = AcceleratorWebsiteWebsite

interface IWebsiteItem {
  """Global Unique Id."""
  id: ID!

  """Website texts"""
  texts(
    """Filter website texts."""
    filter: FilterInput
  ): [WebsiteText!]!
}

input KeyValuePairOfStringAndStringInput {
  """Additional info key."""
  key: String!

  """Additional info value."""
  value: String!
}

type LandingPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: LandingPageFieldContainer!

  """The blocks for the page type."""
  blocks: LandingPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type LandingPageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type LandingPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type LinkFieldDefinition {
  url: String!
  text: String!
}

type LinkFieldValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  linkFieldValue: LinkFieldDefinition
}

type LinksBlockFieldDefinition {
  """Navigation link"""
  navigationLink: LinkFieldDefinition
}

type LinksBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  linksBlockFieldValues: [LinksBlockFieldDefinition!]
}

type LoginPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: LoginPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type LoginPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """New Password"""
  newPassword: String
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric
values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type LongValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  longValue: Long
}

union ManageAddressForOrganizationError = Forbidden

input ManageAddressForOrganizationInput {
  """The organization id, omit to use selected organization."""
  organizationId: ID

  """The address id to update an address, omit to create a new address."""
  addressId: ID

  """The address for the organization that should be added or updated."""
  address: CustomerAddressInput!
}

type ManageAddressForOrganizationPayload {
  customerAddress: CustomerAddress
  errors: [ManageAddressForOrganizationError!]
  query: StorefrontQuery!
}

union ManageAddressForPersonError = Forbidden

input ManageAddressForPersonInput {
  """The person id, omit to use current user."""
  personId: ID

  """The address id to update an address, omit to create a new address."""
  addressId: ID

  """The address for the persion that should be added or updated."""
  address: CustomerAddressInput!
}

type ManageAddressForPersonPayload {
  customerAddress: CustomerAddress
  errors: [ManageAddressForPersonError!]
  query: StorefrontQuery!
}

type ManageOrganizationPersonLink {
  """Organization"""
  organization: IOrganizationItem!

  """Person"""
  person: IPersonItem!

  """Roles"""
  roles: [Role!]!
}

union ManagePersonInOrganizationError = Forbidden

input ManagePersonInOrganizationInput {
  """The organization id."""
  organizationId: ID!

  """The person id."""
  personId: ID!

  """The roles for the person in the organization that should be added."""
  addRoleIds: [ID!]

  """The roles for the person in the organization that should be removed."""
  removeRoleIds: [ID!]
}

type ManagePersonInOrganizationPayload {
  manageOrganizationPersonLink: ManageOrganizationPersonLink
  errors: [ManagePersonInOrganizationError!]
  query: StorefrontQuery!
}

"""Matcher for fields."""
input MatcherOfNullableOfDateTimeOffsetInput {
  """Exact match on value."""
  value: DateTime

  """Match on ange value."""
  range: RangeMatchOfNullableOfDateTimeOffsetInput
}

"""Matcher for fields."""
input MatcherOfNullableOfDecimalInput {
  """Exact match on value."""
  value: Decimal

  """Match on ange value."""
  range: RangeMatchOfNullableOfDecimalInput
}

type MegaMenuColumnWebsiteFieldDefinition {
  """Column header"""
  megaMenuColumnHeader: String

  """Categories"""
  megaMenuCategories: [PointerProductCategoryItem!]

  """Pages"""
  megaMenuPages: [PointerPageItem!]

  """Filters"""
  megaMenuFilters: [String]

  """Editor"""
  megaMenuEditor: String

  """Additional link"""
  megaMenuAdditionalLink: String

  """Link to category"""
  megaMenuLinkToCategory: [PointerProductCategoryItem!]

  """Link to page"""
  megaMenuLinkToPage: [PointerPageItem!]
}

type MegaMenuColumnWebsiteFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  megaMenuColumnWebsiteFieldValues: [MegaMenuColumnWebsiteFieldDefinition!]
}

type MegaMenuPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MegaMenuPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MegaMenuPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Category"""
  megaMenuCategory: [PointerProductCategoryItem!]

  """Page"""
  megaMenuPage: [PointerPageItem!]

  """Show mega menu content"""
  megaMenuShowContent: Boolean

  """Show sub categories"""
  megaMenuShowSubCategories: Boolean

  """Mega menu column"""
  megaMenuColumn: [MegaMenuColumnWebsiteFieldDefinition!]
}

type Metadata {
  links: [MetadateLinkItem!]!
  tags: [MetadateTagItem!]!
  title: String
  language: String!
}

type MetadateLinkItem {
  href: String!
  attributes: [MetadateLinkItemAttribute!]!
}

type MetadateLinkItemAttribute {
  name: String!
  value: String!
}

type MetadateTagItem {
  content: String!
  name: String!
}

type MultiFieldOptions {
  array: Boolean!
  fields: [MultiFieldOptionsField!]!
}

type MultiFieldOptionsField {
  fieldId: String!
  name: String
  fieldMetadata: IFieldMetadataItem!
}

type MyAccountAddressesPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyAccountAddressesPageFieldContainer!

  """The blocks for the page type."""
  blocks: MyAccountAddressesPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyAccountAddressesPageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type MyAccountAddressesPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type MyAccountDashboardPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyAccountDashboardPageFieldContainer!

  """The blocks for the page type."""
  blocks: MyAccountDashboardPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyAccountDashboardPageBlockContainer {
  """The blocks for Top."""
  top: [IBlock]!

  """The blocks for Content."""
  content: [IBlock]!
}

type MyAccountDashboardPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type MyAccountLoginDetailsPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyAccountLoginDetailsPageFieldContainer!

  """The blocks for the page type."""
  blocks: MyAccountLoginDetailsPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyAccountLoginDetailsPageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type MyAccountLoginDetailsPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type MyAccountMyProfilePage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyAccountMyProfilePageFieldContainer!

  """The blocks for the page type."""
  blocks: MyAccountMyProfilePageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyAccountMyProfilePageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type MyAccountMyProfilePageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type MyAccountOrderHistoryPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyAccountOrderHistoryPageFieldContainer!

  """The blocks for the page type."""
  blocks: MyAccountOrderHistoryPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyAccountOrderHistoryPageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type MyAccountOrderHistoryPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type MyAccountOrderPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyAccountOrderPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyAccountOrderPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type MyPagesPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: MyPagesPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type MyPagesPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """User can edit login username and password"""
  mayUserEditLogin: Boolean
}

type NavigationContainerBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: NavigationContainerBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type NavigationContainerBlockFieldContainer {
  """Name"""
  _name: String

  """LayoutDesktop"""
  layoutDesktop: [TextOptionDefinition!]

  """LayoutMobile"""
  layoutMobile: [TextOptionDefinition!]

  """LayoutTablet"""
  layoutTablet: [TextOptionDefinition!]
}

type NavigationItemBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: NavigationItemBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type NavigationItemBlockFieldContainer {
  """Name"""
  _name: String

  """Navigation link"""
  navigationLink: LinkFieldDefinition

  """Translation missing"""
  bannerItem: [BannerItemBlockFieldDefinition!]
}

type NavigationLinksBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: NavigationLinksBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type NavigationLinksBlockFieldContainer {
  """Name"""
  _name: String

  """NavigationLinksHeader"""
  navigationLinksHeader: LinkFieldDefinition

  """Navigation links"""
  navigationLinks: [NavigationLinksBlockFieldDefinition!]

  """Collapsible Mobile"""
  collapsibleMobile: Boolean

  """Translation missing"""
  headerLabel: String
}

type NavigationLinksBlockFieldDefinition {
  """Navigation link"""
  navigationLink: LinkFieldDefinition
}

type NavigationLinksBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  navigationLinksBlockFieldValues: [NavigationLinksBlockFieldDefinition!]
}

type NewFAQItemBlockFieldDefinition {
  """Title"""
  title: String

  """RichText"""
  richText: String
}

type NewFAQItemBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  newFAQItemBlockFieldValues: [NewFAQItemBlockFieldDefinition!]
}

type NewProductSpecificationsProductFieldDefinition {
  """Name"""
  _name: String

  """Translation missing"""
  newSpecificationItem: String
}

type NewProductSpecificationsProductFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  newProductSpecificationsProductFieldValues: [NewProductSpecificationsProductFieldDefinition!]
}

type NewRatingItemBlockFieldDefinition {
  """Translation missing"""
  ratingNumber: Decimal

  """RichTitle"""
  richTitle: String

  """RichText"""
  richText: String

  """Translation missing"""
  ratingStatus: [TextOptionDefinition!]

  """Translation missing"""
  cssClass: String
}

type NewRatingItemBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  newRatingItemBlockFieldValues: [NewRatingItemBlockFieldDefinition!]
}

input NewsDateInput {
  """From date"""
  from: DateTime!

  """To date"""
  to: DateTime!
}

type NewsListPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: NewsListPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type NewsListPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """Introduction"""
  introduction: String

  """Text"""
  text: String

  """Number of news per page"""
  numberOfNewsPerPage: Int

  """Links"""
  links: [PointerPageItem!]

  """Files"""
  files: [PointerMediaFileItem!]
}

type NewsPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: NewsPageFieldContainer!

  """The blocks for the page type."""
  blocks: NewsPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type NewsPageBlockContainer {
  """The blocks for Header."""
  header: [IBlock]!
}

type NewsPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """News date"""
  newsDate: DateTime

  """Introduction"""
  introduction: String

  """Text"""
  text: String

  """Links"""
  links: [PointerPageItem!]

  """Files"""
  files: [PointerMediaFileItem!]

  """Image"""
  image: PointerMediaImageItem
}

"""Match information inside text field."""
input NgramStringFieldTermInput {
  """Value to match."""
  value: String

  """Boost hits on match."""
  boost: Float

  """Configure fuzziness."""
  fuzziness: FuzzinessItemInput

  """Use synonym analyzer capability."""
  synonymAnalyzer: Boolean! = false

  """Type of search for this field that should be used."""
  searchType: StringFieldSearchType
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

"""Not found."""
type NotFoundError {
  """Query data when no results are found for the URL."""
  query(
    """Alternative context url for the query"""
    contextUrl: String
  ): StorefrontQuery
}

"""Notification urls"""
input NotificationInput {
  """A notification will be sent when order is confirmed."""
  orderConfirmedUrl: String
}

type NotificationType {
  """A notification will be sent when order is confirmed."""
  orderConfirmedUrl: String
}

type ObjectItemBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ObjectItemBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ObjectItemBlockFieldContainer {
  """Name"""
  _name: String

  """Title"""
  title: String

  """Icon Src"""
  iconSrc: PointerMediaImageItem

  """Translation missing"""
  imageAltText: String

  """Navigation link"""
  navigationLink: LinkFieldDefinition
}

type ObjectItemBlockFieldDefinition {
  """Title"""
  title: String

  """Link"""
  link: [PointerPageItem!]

  """Icon Src"""
  iconSrc: PointerMediaImageItem

  """Translation missing"""
  imageAltText: String
}

type ObjectItemBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  objectItemBlockFieldValues: [ObjectItemBlockFieldDefinition!]
}

"""Represents a order."""
type Order implements Node {
  """Global Unique Id."""
  id: ID!

  """Order status"""
  status: String

  """Order tags"""
  tags: [String]

  """Order number."""
  orderNumber: String

  """Order rows."""
  rows: [OrderRow!]!

  """Country selected for shipping."""
  country: Country!

  """Currency for the order."""
  currency: Currency!

  """Customer details."""
  customerDetails: OrderCustomerDetails!

  """Billing address."""
  billingAddress: OrderAddress!

  """Shipping address."""
  shippingAddress: OrderAddress!

  """Discount information."""
  discountInfos: [DiscountInfo!]!

  """Order note."""
  note: String

  """Additional order info."""
  additionalInfo: [AdditionalInfo!]!

  """Additional shipping info."""
  additionalShippingInfo: [AdditionalInfo!]!

  """Product total including VAT."""
  productTotalIncludingVat: Decimal!

  """Product total excluding VAT."""
  productTotalExcludingVat: Decimal!

  """Shipping cost including VAT."""
  shippingCostIncludingVat: Decimal!

  """Shipping cost excluding VAT."""
  shippingCostExcludingVat: Decimal!

  """Total fee including VAT."""
  totalFeesIncludingVat: Decimal!

  """Total fee excluding VAT."""
  totalFeesExcludingVat: Decimal!

  """Total promotions and discounts including VAT."""
  totalPromotionsAndDiscountsIncludingVat: Decimal!

  """Total promotions and discounts excluding VAT."""
  totalPromotionsAndDiscountsExcludingVat: Decimal!

  """Grand total (includes VAT)"""
  grandTotal: Decimal!

  """Total VAT."""
  totalVat: Decimal!

  """Order date."""
  orderDate: DateTime!
}

"""Represents a address."""
type OrderAddress {
  """First name."""
  firstName: String

  """Last name."""
  lastName: String

  """Title."""
  title: String

  """Email."""
  email: String

  """Mobile phone."""
  mobilePhone: String

  """Fax."""
  fax: String

  """Organization name."""
  organizationName: String

  """Reference."""
  reference: String

  """Address line 1."""
  address1: String

  """Address line 2."""
  address2: String

  """Care of."""
  careOf: String

  """City."""
  city: String

  """Country."""
  country: String

  """House extension."""
  houseExtension: String

  """House number."""
  houseNumber: String

  """State."""
  state: String

  """Phone number."""
  phoneNumber: String

  """Zip code."""
  zipCode: String
}

"""Represents a address."""
input OrderAddressInput {
  """First name."""
  firstName: String

  """Last name."""
  lastName: String

  """Title."""
  title: String

  """Email."""
  email: String

  """Mobile phone."""
  mobilePhone: String

  """Fax."""
  fax: String

  """Organization name."""
  organizationName: String

  """Reference."""
  reference: String

  """Address line 1."""
  address1: String

  """Address line 2."""
  address2: String

  """Care of."""
  careOf: String

  """City."""
  city: String

  """Country."""
  country: String

  """House extension."""
  houseExtension: String

  """House number."""
  houseNumber: String

  """State."""
  state: String

  """Phone number."""
  phoneNumber: String

  """Zip code."""
  zipCode: String
}

type OrderConfirmationPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: OrderConfirmationPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type OrderConfirmationPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge!]

  """A flattened list of the nodes."""
  nodes: [Order!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a customer details."""
type OrderCustomerDetails {
  """First name."""
  firstName: String

  """Last name."""
  lastName: String

  """Title."""
  title: String

  """Email."""
  email: String

  """Phone."""
  phone: String

  """Business registration number."""
  businessRegistrationNumber: String

  """Natianal identification number."""
  nationalIdentificationNumber: String

  """VAT registration number."""
  vatRegistrationNumber: String

  """Customer type."""
  customerType: CustomerType

  """Customer number."""
  customerNumber: String
}

"""Represents a customer details."""
input OrderCustomerDetailsInput {
  """First name."""
  firstName: String

  """Last name."""
  lastName: String

  """Title."""
  title: String

  """Email."""
  email: String

  """Phone."""
  phone: String

  """Business registration number."""
  businessRegistrationNumber: String

  """Natianal identification number."""
  nationalIdentificationNumber: String

  """VAT registration number."""
  vatRegistrationNumber: String

  """Customer type."""
  customerType: CustomerType

  """Customer number."""
  customerNumber: String
}

"""An edge in a connection."""
type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Order!
}

type OrderHistoryPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: OrderHistoryPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type OrderHistoryPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """Introduction"""
  introduction: String

  """Text"""
  text: String

  """Number of orders per page"""
  numberOfOrdersPerPage: Int

  """Order link"""
  orderLink: [PointerPageItem!]
}

type OrderPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: OrderPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type OrderPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

"""Represents a row item."""
type OrderRow {
  """Row id."""
  rowId: String!

  """Article number."""
  articleNumber: String!

  """Quantity."""
  quantity: Decimal!

  """Description."""
  description: String

  """Additional row info."""
  additionalInfo: [AdditionalInfo!]!

  """Row type."""
  rowType: OrderRowType!

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement

  """Product item."""
  product: IProductItem

  """Unit price including VAT."""
  unitPriceIncludingVat: Decimal!

  """Unit price excluding VAT."""
  unitPriceExcludingVat: Decimal!

  """Total price including VAT."""
  totalIncludingVat: Decimal!

  """Total price excluding VAT."""
  totalExcludingVat: Decimal!

  """Total VAT amount."""
  totalVat: Decimal!

  """VAT rate."""
  vatRate: Decimal!

  """VAT details."""
  vatDetails: [VatDetail!]!

  """Discount informations."""
  discountInfos: [DiscountInfo!]
}

"""Represents a row item type."""
enum OrderRowType {
  """Row is of type product."""
  PRODUCT

  """Row is of type fee."""
  FEE

  """Row is of type shipping fee."""
  SHIPPING_FEE

  """Row is of type rounding off adjustment."""
  ROUNDING_OFF_ADJUSTMENT

  """Row is of type discount."""
  DISCOUNT

  """Row is of type alternative payment method."""
  ALTERNATIVE_PAYMENT_METHOD
}

"""A connection to a list of items."""
type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge!]

  """A flattened list of the nodes."""
  nodes: [PersonOrganizationLink!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PersonOrganizationLink!
}

type OrganizationPersonLink {
  """Person"""
  person: IPersonItem!

  """Roles"""
  roles: [Role!]!

  """Role operations"""
  roleOperations: [RoleOperation!]!
}

type OrganizationTemplateOrganization implements Node & IOrganizationItem {
  """Global Unique Id."""
  id: ID!

  """Persons connected to the organization."""
  persons(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PersonConnection

  """Addresses connected to the organization."""
  addresses: [CustomerAddress!]!

  """Orders connected to the organization."""
  orders(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): OrderConnection

  """Customer number for the organization."""
  customerNumber: String!

  """The field data."""
  fields: OrganizationTemplateOrganizationFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!
}

type OrganizationTemplateOrganizationFieldContainer {
  """Name"""
  _nameInvariantCulture: String
}

"""Overrides of operational hours for specific dates."""
type OverrideOperationalHours {
  """Overrides opening hours for the specific date."""
  overrideDate: DateTime!

  """Opening time."""
  openingTime: TimeSpan

  """Closing time."""
  closingTime: TimeSpan

  """Closed."""
  closed: Boolean!
}

"""Product search page query item."""
input PageFieldInput {
  """Page id."""
  pageId: ID!

  """Boost hits on this page."""
  boost: Float

  """Include child pages."""
  includeChildren: Boolean
}

"""Information about pagination in a connection."""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A connection to a list of items."""
type PageItemsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageItemsEdge!]

  """A flattened list of the nodes."""
  nodes: [PageSearchResultItem]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PageItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PageSearchResultItem
}

type PageNotFoundPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: PageNotFoundPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type PageNotFoundPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Title"""
  title: String

  """Error message"""
  errorMessage: String
}

"""A connection to a list of items."""
type PageOrCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageOrCategoryEdge!]

  """A flattened list of the nodes."""
  nodes: [IPageOrCategory!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PageOrCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IPageOrCategory!
}

"""A connection to a list of items."""
type PageSearchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageSearchEdge!]

  """A flattened list of the nodes."""
  nodes: [IPageItem!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """The facets."""
  facets: [IFacet!]!
}

"""An edge in a connection."""
type PageSearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IPageItem!

  """The search score."""
  score: Float
}

"""Page search query."""
input PageSearchQueryInput {
  """Match item based on page."""
  page: PageFieldInput

  """Match item based on any field that is marked as searchable."""
  content: StringFieldTermInput

  """Match item based on name."""
  name: NgramStringFieldTermInput

  """Match item based on block data."""
  block: BlockQueryInput

  """Match item based on the page type."""
  pageTypes: [String!]

  """Match item based on field that is marked as searchable."""
  field: SearchFieldItemInput

  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfPageSearchQueryAndStorefrontPageDocumentInput
}

type PageSearchResultContext {
  pageItems(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageItemsConnection
}

type PageSearchResultItem {
  data: IPageItem
  id: UUID!
  score: Float!
}

enum PaymentIntegrationType {
  HOSTED_PAYMENT_PAGE
  IFRAME_CHECKOUT
  PAYMENT_WIDGETS
  PAYMENT_APP
  PAYMENT_LINK
  QUICK_CHECKOUT_BUTTON
  GIFT_CARD
  DIRECT_PAYMENT
  PAYMENT_TOKEN
}

"""Represents a payment option."""
type PaymentOption {
  """Name of payment option."""
  name: String

  """Description of payment option."""
  description: String

  """The image."""
  image(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): IImageItem

  """Price of payment option."""
  price: Decimal

  """Flag to indicate if option is selected."""
  selected: Boolean!

  """Payment integration type."""
  integrationType: PaymentIntegrationType!

  """Global Unique Id."""
  id: ID!
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge!]

  """A flattened list of the nodes."""
  nodes: [OrganizationPersonLink!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PersonEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: OrganizationPersonLink!
}

type PersonOrganizationLink {
  """Organization"""
  organization: IOrganizationItem!

  """Roles"""
  roles: [Role!]!

  """Role operations"""
  roleOperations: [RoleOperation!]!
}

"""Delivery pickup location"""
type PickupLocation {
  """Pickup location id."""
  pickupLocationId: String!

  """Name."""
  name: String!

  """Address."""
  address: OrderAddress

  """Longitude."""
  longitude: Decimal

  """Latitude."""
  latitude: Decimal

  """Type."""
  type: PickupLocationType!

  """Operational hours."""
  operationalHours: [DayOfWeekOperationalHours!]

  """Overrides of operational hours."""
  operationalHoursOverrides: [OverrideOperationalHours!]
}

"""Delivery pickup location types."""
enum PickupLocationType {
  """Pickup store."""
  PICKUP_STORE

  """Pickup point."""
  PICKUP_POINT

  """Automated pickup station."""
  AUTOMATED_PICKUP_STATION

  """Other."""
  OTHER
}

union PlaceOrderError = ValidationError

type PlaceOrderPayload {
  receipt: Receipt
  errors: [PlaceOrderError!]
  query: StorefrontQuery!
}

"""
The default pointer that contains only the reference for the specified item.
"""
type Pointer implements IPointerItem {
  entitySystemId: UUID!
}

"""Pointer for media file item."""
type PointerMediaFileItem implements IPointerItem {
  """The image."""
  item: IFileItem
  entitySystemId: UUID!
}

type PointerMediaFileValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerMediaFileValue: PointerMediaFileItem
}

type PointerMediaFileValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerMediaFileValues: [PointerMediaFileItem!]
}

"""Pointer for media image item."""
type PointerMediaImageItem implements IPointerItem {
  """The image."""
  item(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): IImageItem
  entitySystemId: UUID!
}

type PointerMediaImageValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerMediaImageValue: PointerMediaImageItem
}

type PointerMediaImageValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerMediaImageValues: [PointerMediaImageItem!]
}

"""Pointer for media video item."""
type PointerMediaVideoItem implements IPointerItem {
  """The image."""
  item: IFileItem
  entitySystemId: UUID!
}

type PointerMediaVideoValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerMediaVideoValues: [PointerMediaVideoItem!]
}

type PointerOptions {
  multiSelect: Boolean!
  entityType: String!
}

"""Pointer for page item."""
type PointerPageItem implements IPointerItem {
  """Global Unique Id."""
  id: ID!

  """The page item."""
  item: IPageItem
  entitySystemId: UUID!
  channelSystemId: UUID
}

type PointerPageValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerPageValues: [PointerPageItem!]
}

"""Pointer for product category item."""
type PointerProductCategoryItem implements IPointerItem {
  """Global Unique Id."""
  id: ID!

  """The product category item."""
  item: ICategoryItem
  entitySystemId: UUID!
}

type PointerProductCategoryValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerProductCategoryValues: [PointerProductCategoryItem!]
}

"""Pointer for product field."""
type PointerProductFieldItem implements IPointerItem {
  """
  Product field doesn't contain entity system identifier. Use Field instead.
  """
  entitySystemId: UUID!

  """Field type."""
  fieldType: String
  field: String!
}

type PointerProductFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerProductFieldValues: [PointerProductFieldItem!]
}

"""Pointer for product item."""
type PointerProductItem implements IPointerItem {
  """Global Unique Id."""
  id: ID!

  """The product item."""
  item: IProductItem
  entitySystemId: UUID!
}

"""Pointer for product category item."""
type PointerProductListItem implements IPointerItem {
  """Global Unique Id."""
  id: ID!
  entitySystemId: UUID!
}

type PointerProductListValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerProductListValues: [PointerProductListItem!]
}

type PointerProductValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerProductValues: [PointerProductItem!]
}

type PointerValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  pointerValues: [Pointer!]
}

"""
When running a page in preview mode the preview item includes information related to the preview.
"""
type Preview {
  """Scripts that should be injected on the site for live editing."""
  scripts: [PreviewFileItem!]!

  """CSS files that should be injected on the site for live editing."""
  styleSheets: [PreviewFileItem!]
}

type PreviewFileItem {
  src: String!
  attributes: [PreviewFileItemAttribute!]
}

type PreviewFileItemAttribute {
  name: String!
  value: String!
}

"""Product search price list query item."""
input PriceListFieldInput {
  """Require that product has price."""
  requirePrice: Boolean
}

input PriceRangeInputLegacy {
  """From price"""
  from: Int!

  """To price"""
  to: Int!
}

type PrimaryNavigationBannerBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: PrimaryNavigationBannerBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type PrimaryNavigationBannerBlockFieldContainer {
  """Name"""
  _name: String

  """Image"""
  blockImagePointer: PointerMediaImageItem

  """Navigation link"""
  navigationLink: LinkFieldDefinition
}

type PrimaryNavigationCategoriesBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: PrimaryNavigationCategoriesBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type PrimaryNavigationCategoriesBlockFieldContainer {
  """Name"""
  _name: String

  """Category"""
  categoryLink: [PointerProductCategoryItem!]
}

type PrimaryNavigationColumnBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: PrimaryNavigationColumnBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: PrimaryNavigationColumnBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type PrimaryNavigationColumnBlockFieldContainer {
  """Name"""
  _name: String
}

type PrimaryNavigationColumnBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type PrimaryNavigationLinkBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: PrimaryNavigationLinkBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: PrimaryNavigationLinkBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type PrimaryNavigationLinkBlockFieldContainer {
  """Name"""
  _name: String

  """Navigation link"""
  navigationLink: LinkFieldDefinition

  """Navigation links"""
  navigationLinks: [NavigationLinksBlockFieldDefinition!]
}

type PrimaryNavigationLinkBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type ProductBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ProductBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ProductBlockFieldContainer {
  """Name"""
  _name: String

  """Title"""
  blockTitle: String

  """Category"""
  categoryLink: [PointerProductCategoryItem!]

  """Product list"""
  productListLink: [PointerProductListItem!]

  """Products"""
  productsLinkList: [PointerProductItem!]

  """Number of products"""
  numberOfProducts: Int

  """Product sorting"""
  productSorting: [TextOptionDefinition!]

  """Link text"""
  linkText: String

  """Link to category"""
  linkToCategory: [PointerProductCategoryItem!]

  """Link to page"""
  linkToPage: [PointerPageItem!]

  """Products to the right"""
  showProductToTheRight: Boolean
}

"""Product search category query item."""
input ProductCategoryFieldInput {
  """Category id."""
  categoryId: ID!

  """Include products in child categories."""
  includeChildren: Boolean
}

"""A connection to a list of items."""
type ProductItemsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductItemsEdge!]

  """A flattened list of the nodes."""
  nodes: [ProductSearchResultItem]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProductItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProductSearchResultItem
}

"""Product search product list query item."""
input ProductListFieldInput {
  """Product list id."""
  productListId: ID!
}

type ProductListPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: ProductListPageFieldContainer!

  """The blocks for the page type."""
  blocks: ProductListPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ProductListPageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!

  """The blocks for MarketingContent."""
  marketingContent: [IBlock]!

  """The blocks for ProductList."""
  productList: [IBlock]!
}

type ProductListPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Product list"""
  productList: [PointerProductListItem!]

  """description Rich text"""
  descriptionRichtext: String

  """Categories"""
  megaMenuCategories: [PointerProductCategoryItem!]

  """Category"""
  megaMenuCategory: [PointerProductCategoryItem!]
}

"""The price."""
type ProductPrice {
  """The currency."""
  currency: Currency!

  """The discount price excluding VAT."""
  discountPriceExcludingVat: Decimal

  """The discount price including VAT."""
  discountPriceIncludingVat: Decimal

  """The tier prices."""
  tierPrices: [ProductTierPrice]

  """The unit price including VAT."""
  unitPriceIncludingVat: Decimal!

  """The unit price excluding VAT."""
  unitPriceExcludingVat: Decimal!

  """The vat rate."""
  vatRate: Decimal!
}

type ProductsAndBannerBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ProductsAndBannerBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ProductsAndBannerBlockFieldContainer {
  """Name"""
  _name: String

  """Image"""
  blockImagePointer: PointerMediaImageItem

  """Link text"""
  linkText: String

  """Link to category"""
  bannerLinkToCategory: [PointerProductCategoryItem!]

  """Link to page"""
  bannerLinkToPage: [PointerPageItem!]

  """Link to product"""
  bannerLinkToProduct: [PointerProductItem!]

  """Call to action text"""
  actionText: String

  """Title"""
  blockTitle: String

  """Category"""
  categoryLink: [PointerProductCategoryItem!]

  """Product list"""
  productListLink: [PointerProductListItem!]

  """Products"""
  productsLinkList: [PointerProductItem!]

  """Number of products"""
  numberOfProducts: Int

  """Product sorting"""
  productSorting: [TextOptionDefinition!]

  """Link text"""
  productLinkText: String

  """Link to category"""
  linkToCategory: [PointerProductCategoryItem!]

  """Link to page"""
  linkToPage: [PointerPageItem!]

  """Products to the right"""
  showProductToTheRight: Boolean
}

type ProductsBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: ProductsBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type ProductsBlockFieldContainer {
  """Name"""
  _name: String

  """Title"""
  title: String

  """Category"""
  category: [PointerProductCategoryItem!]

  """Product list"""
  productList: [PointerProductListItem!]

  """Number of products"""
  numberOfProducts: Int

  """Sorting"""
  sorting: [TextOptionDefinition!]
}

"""A connection to a list of items."""
type ProductSearchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductSearchEdge!]

  """A flattened list of the nodes."""
  nodes: [IProductItem!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """The facets."""
  facets: [IFacet!]!
}

"""An edge in a connection."""
type ProductSearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IProductItem!

  """The search score."""
  score: Float
}

"""Product search query."""
input ProductSearchQueryInput {
  """Match item based on category."""
  category: ProductCategoryFieldInput

  """Match item based on product list."""
  productList: ProductListFieldInput

  """Match item based on price list."""
  priceList: PriceListFieldInput

  """Match item based on any field that is marked as searchable."""
  content: StringFieldTermInput

  """Match item based on name."""
  name: NgramStringFieldTermInput

  """Match item based on article number."""
  articleNumber: SimpleStringFieldTermInput

  """Match item based on field that is marked as searchable."""
  field: SearchFieldItemInput

  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfProductSearchQueryItemAndStorefrontProductDocumentInput
}

"""Product search query item."""
input ProductSearchQueryItemInput {
  """Match item based on any field that is marked as searchable."""
  content: StringFieldTermInput

  """Match item based on name."""
  name: NgramStringFieldTermInput

  """Match item based on article number."""
  articleNumber: SimpleStringFieldTermInput

  """Match item based on field that is marked as searchable."""
  field: SearchFieldItemInput

  """Group multiple conditions into a boolean group."""
  bool: BoolQueryOfProductSearchQueryItemAndStorefrontProductDocumentInput
}

type ProductSearchResultContext {
  productItems(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ProductItemsConnection

  """The faceted filters."""
  facetedFilters: [FacetGroupItem]

  """The sort criterias"""
  sortCriteria: [SortResultItem!]!
}

type ProductSearchResultItem {
  data: IProductItem
  id: UUID!
  score: Float!
}

"""The tier price."""
type ProductTierPrice {
  """The minimum quantity to buy to get the tier price."""
  minimumQuantity: Decimal!

  """The unit price including VAT."""
  unitPriceIncludingVat: Decimal!

  """The unit price excluding VAT."""
  unitPriceExcludingVat: Decimal!

  """The next minimum quantity."""
  nextMinimumQuantity: Decimal

  """The previous minimum quantity."""
  previousMinimumQuantity: Decimal
}

type ProductWithOneVariantProduct implements Node & ITemplateInfo & IProductItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The article number"""
  articleNumber: String!

  """The name."""
  name: String

  """If the item is variant."""
  isVariant: Boolean!

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """If the item is in stock."""
  inStock: Boolean! @deprecated(reason: "Use StockStatus.InStockQuantity instead.")

  """Stock status information."""
  stockStatusDescription: String @deprecated(reason: "Use StockStatus.Description instead.")

  """Stock status."""
  stockStatus: StockStatus!

  """Calculated product price."""
  price: ProductPrice

  """Display template."""
  templateName: String

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement

  """Raw product data with the base product and variant."""
  rawData: ProductWithOneVariantProductRawData!

  """BaseProduct data."""
  baseProduct: ProductWithOneVariantProduct!

  """Variants."""
  variants(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ProductWithOneVariantProductVariantConnection

  """The field data."""
  fields: ProductWithOneVariantProductFieldContainer!

  """The field group."""
  fieldGroup: ProductWithOneVariantProductFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!

  """The relationships for product or category."""
  relationships: ProductWithOneVariantProductRelationships!

  """The relationships for product or category."""
  relations(
    """Filter relationship."""
    filter: RelationshipFilterInput
  ): [Relationship!]!
}

type ProductWithOneVariantProductFieldContainer {
  """Name"""
  _name: String

  """Description"""
  _description: String

  """Url"""
  _url: String

  """Search engine optimized title"""
  _seoTitle: String

  """Search engine optimized description"""
  _seoDescription: String

  """News"""
  news: DateTime

  """Brand"""
  brand: [TextOptionDefinition!]

  """Color"""
  color: [TextOptionDefinition!]

  """Size"""
  size: [TextOptionDefinition!]

  """Product sheet"""
  productSheet: PointerMediaFileItem

  """Product specifications"""
  specification: String

  """Weight"""
  weight: Decimal
}

type ProductWithOneVariantProductFieldGroups {
  """Field group: Product information"""
  product_information: FieldGroup!

  """Field group: Product specification"""
  product_specification: FieldGroup!
}

type ProductWithOneVariantProductRawData {
  baseProduct: ProductWithOneVariantProduct!
  variants: [ProductWithOneVariantProduct!]!
}

type ProductWithOneVariantProductRelationships {
  accessory: Relationship!
  similarProducts: Relationship!
}

"""A connection to a list of items."""
type ProductWithOneVariantProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductWithOneVariantProductVariantEdge!]

  """A flattened list of the nodes."""
  nodes: [ProductWithOneVariantProduct!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProductWithOneVariantProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProductWithOneVariantProduct!
}

type ProductWithVariantsFurnitureProduct implements Node & ITemplateInfo & IProductItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The article number"""
  articleNumber: String!

  """The name."""
  name: String

  """If the item is variant."""
  isVariant: Boolean!

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """If the item is in stock."""
  inStock: Boolean! @deprecated(reason: "Use StockStatus.InStockQuantity instead.")

  """Stock status information."""
  stockStatusDescription: String @deprecated(reason: "Use StockStatus.Description instead.")

  """Stock status."""
  stockStatus: StockStatus!

  """Calculated product price."""
  price: ProductPrice

  """Display template."""
  templateName: String

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement

  """Raw product data with the base product and variant."""
  rawData: ProductWithVariantsFurnitureProductRawData!

  """BaseProduct data."""
  baseProduct: ProductWithVariantsFurnitureProduct!

  """Variants."""
  variants(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ProductWithVariantsFurnitureProductVariantConnection

  """The field data."""
  fields: ProductWithVariantsFurnitureProductFieldContainer!

  """The field group."""
  fieldGroup: ProductWithVariantsFurnitureProductFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!

  """The relationships for product or category."""
  relationships: ProductWithVariantsFurnitureProductRelationships!

  """The relationships for product or category."""
  relations(
    """Filter relationship."""
    filter: RelationshipFilterInput
  ): [Relationship!]!
}

type ProductWithVariantsFurnitureProductFieldContainer {
  """Name"""
  _name: String

  """Description"""
  _description: String

  """Product line"""
  productLine: [TextOptionDefinition!]

  """Assembling instruction"""
  assemblingInstruction: PointerMediaFileItem

  """Measurement"""
  measurement: PointerMediaFileItem

  """Spare parts"""
  spareParts: PointerMediaFileItem

  """Product sheet"""
  productSheet: PointerMediaFileItem

  """Care advice"""
  careAdvice: String

  """Url"""
  _url: String

  """Search engine optimized title"""
  _seoTitle: String

  """Search engine optimized description"""
  _seoDescription: String

  """NOBB"""
  nOBB: String

  """RSK"""
  rSK: String

  """EAN"""
  eAN: String

  """Stocked article"""
  stockedArticle: Boolean

  """Width"""
  width: Decimal

  """Depth"""
  depth: Decimal

  """Height"""
  height: Decimal

  """Weight"""
  weight: Decimal

  """Hole spacing, handle (mm)"""
  holeSpacingHandle: [DecimalOptionDefinition!]

  """Front material"""
  frontMaterial: [TextOptionDefinition!]

  """Body material"""
  bodyMaterial: [TextOptionDefinition!]

  """Surface treatment"""
  surfaceTreatment: [TextOptionDefinition!]

  """Surface finish"""
  surfaceFinish: [TextOptionDefinition!]

  """Color"""
  color: [TextOptionDefinition!]

  """Main material"""
  mainMaterial: [TextOptionDefinition!]

  """S├ñker vatten"""
  sakerVatten: Boolean

  """ETIM"""
  eTIM: String

  """Suspension type"""
  suspensionType: [TextOptionDefinition!]

  """Opening function"""
  openingFunction: [TextOptionDefinition!]

  """Package height"""
  packageHeight: Decimal

  """Package width"""
  packageWidth: Decimal

  """Package depth"""
  packageDepth: Decimal

  """Package weight"""
  packageWeight: Decimal
}

type ProductWithVariantsFurnitureProductFieldGroups {
  """Field group: Documents"""
  documents: FieldGroup!

  """Field group: CareAdvice"""
  careAdvice: FieldGroup!

  """Field group: ItemNumber"""
  itemNumber: FieldGroup!

  """Field group: DimensionsAndWeight"""
  dimensionsAndWeight: FieldGroup!

  """Field group: MaterialAndSurface"""
  materialAndSurface: FieldGroup!

  """Field group: StandardsAndClassifications"""
  standardsAndClassifications: FieldGroup!

  """Field group: Packaging"""
  packaging: FieldGroup!
}

type ProductWithVariantsFurnitureProductRawData {
  baseProduct: ProductWithVariantsFurnitureProduct!
  variants: [ProductWithVariantsFurnitureProduct!]!
}

type ProductWithVariantsFurnitureProductRelationships {
  accessory: Relationship!
  similarProducts: Relationship!
}

"""A connection to a list of items."""
type ProductWithVariantsFurnitureProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductWithVariantsFurnitureProductVariantEdge!]

  """A flattened list of the nodes."""
  nodes: [ProductWithVariantsFurnitureProduct!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProductWithVariantsFurnitureProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProductWithVariantsFurnitureProduct!
}

type ProductWithVariantsListProduct implements Node & ITemplateInfo & IProductItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The article number"""
  articleNumber: String!

  """The name."""
  name: String

  """If the item is variant."""
  isVariant: Boolean!

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """If the item is in stock."""
  inStock: Boolean! @deprecated(reason: "Use StockStatus.InStockQuantity instead.")

  """Stock status information."""
  stockStatusDescription: String @deprecated(reason: "Use StockStatus.Description instead.")

  """Stock status."""
  stockStatus: StockStatus!

  """Calculated product price."""
  price: ProductPrice

  """Display template."""
  templateName: String

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement

  """Raw product data with the base product and variant."""
  rawData: ProductWithVariantsListProductRawData!

  """BaseProduct data."""
  baseProduct: ProductWithVariantsListProduct!

  """Variants."""
  variants(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ProductWithVariantsListProductVariantConnection

  """The field data."""
  fields: ProductWithVariantsListProductFieldContainer!

  """The field group."""
  fieldGroup: ProductWithVariantsListProductFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field group."""
  displayFieldGroup: ProductWithVariantsListProductDisplayFieldGroups!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!

  """The relationships for product or category."""
  relationships: ProductWithVariantsListProductRelationships!

  """The relationships for product or category."""
  relations(
    """Filter relationship."""
    filter: RelationshipFilterInput
  ): [Relationship!]!
}

type ProductWithVariantsListProductDisplayFieldGroups {
  """Display field group: variantFieldColumns"""
  variantFieldColumns: DisplayFieldGroup!
}

type ProductWithVariantsListProductFieldContainer {
  """Name"""
  _name: String

  """Description"""
  _description: String

  """Brand"""
  brand: [TextOptionDefinition!]

  """Url"""
  _url: String

  """Search engine optimized title"""
  _seoTitle: String

  """Search engine optimized description"""
  _seoDescription: String

  """Product specifications"""
  specification: String

  """Product sheet"""
  productSheet: PointerMediaFileItem

  """Translation missing"""
  newProductSpecifications: [NewProductSpecificationsProductFieldDefinition!]

  """Color"""
  color: [TextOptionDefinition!]

  """Size"""
  size: [TextOptionDefinition!]
}

type ProductWithVariantsListProductFieldGroups {
  """Field group: Product specification"""
  product_specification: FieldGroup!
}

type ProductWithVariantsListProductRawData {
  baseProduct: ProductWithVariantsListProduct!
  variants: [ProductWithVariantsListProduct!]!
}

type ProductWithVariantsListProductRelationships {
  accessory: Relationship!
  similarProducts: Relationship!
}

"""A connection to a list of items."""
type ProductWithVariantsListProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductWithVariantsListProductVariantEdge!]

  """A flattened list of the nodes."""
  nodes: [ProductWithVariantsListProduct!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProductWithVariantsListProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProductWithVariantsListProduct!
}

type ProductWithVariantsProduct implements Node & ITemplateInfo & IProductItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The article number"""
  articleNumber: String!

  """The name."""
  name: String

  """If the item is variant."""
  isVariant: Boolean!

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """If the item is in stock."""
  inStock: Boolean! @deprecated(reason: "Use StockStatus.InStockQuantity instead.")

  """Stock status information."""
  stockStatusDescription: String @deprecated(reason: "Use StockStatus.Description instead.")

  """Stock status."""
  stockStatus: StockStatus!

  """Calculated product price."""
  price: ProductPrice

  """Display template."""
  templateName: String

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement

  """Raw product data with the base product and variant."""
  rawData: ProductWithVariantsProductRawData!

  """BaseProduct data."""
  baseProduct: ProductWithVariantsProduct!

  """Variants."""
  variants(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ProductWithVariantsProductVariantConnection

  """The field data."""
  fields: ProductWithVariantsProductFieldContainer!

  """The field group."""
  fieldGroup: ProductWithVariantsProductFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!

  """The relationships for product or category."""
  relationships: ProductWithVariantsProductRelationships!

  """The relationships for product or category."""
  relations(
    """Filter relationship."""
    filter: RelationshipFilterInput
  ): [Relationship!]!
}

type ProductWithVariantsProductFieldContainer {
  """Name"""
  _name: String

  """Description"""
  _description: String

  """Brand"""
  brand: [TextOptionDefinition!]

  """Product sheet"""
  productSheet: PointerMediaFileItem

  """Product specifications"""
  specification: String

  """Url"""
  _url: String

  """Search engine optimized title"""
  _seoTitle: String

  """Search engine optimized description"""
  _seoDescription: String

  """Color"""
  color: [TextOptionDefinition!]

  """Size"""
  size: [TextOptionDefinition!]
}

type ProductWithVariantsProductFieldGroups {
  """Field group: Product information"""
  product_information: FieldGroup!

  """Field group: Product specification"""
  product_specification: FieldGroup!
}

type ProductWithVariantsProductRawData {
  baseProduct: ProductWithVariantsProduct!
  variants: [ProductWithVariantsProduct!]!
}

type ProductWithVariantsProductRelationships {
  accessory: Relationship!
  similarProducts: Relationship!
}

"""A connection to a list of items."""
type ProductWithVariantsProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductWithVariantsProductVariantEdge!]

  """A flattened list of the nodes."""
  nodes: [ProductWithVariantsProduct!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProductWithVariantsProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProductWithVariantsProduct!
}

type RangeFacet implements IFacet {
  """Facet field."""
  field: String!

  """Facet name."""
  name: String

  """Facet items."""
  items: [RangeFacetItem!]!
}

type RangeFacetItem {
  """Number of entities belonging to this facet."""
  count: Int!

  """Gets the minimum value of the facet."""
  min: Decimal!

  """Gets the maximum value of the facet."""
  max: Decimal!

  """
  Gets the minimum selected value of the facet, as provided in the request if facet bucket count is 1.
  """
  selectedMin: Decimal

  """
  Gets the maximum selected value of the facet, as provided in the request if facet bucket count is 1.
  """
  selectedMax: Decimal

  """
  Gets selected value of the facet if min and max value matching with the provided in the reqyest.
  """
  selected: Boolean!
}

"""Range facet item."""
input RangeFacetItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!

  """Selected ranges."""
  selected: [RangeFacetValueInput!]

  """Max bucket count."""
  maxBucketCount: Int! = 1
}

input RangeFacetValueInput {
  min: String!
  max: String!
}

"""Matcher for fields."""
input RangeMatchOfNullableOfDateTimeOffsetInput {
  """Match on values above or equal min value."""
  min: DateTime

  """Match on values below or equal max value."""
  max: DateTime
}

"""Matcher for fields."""
input RangeMatchOfNullableOfDecimalInput {
  """Match on values above or equal min value."""
  min: Decimal

  """Match on values below or equal max value."""
  max: Decimal
}

type RatingReviewItemBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: RatingReviewItemBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type RatingReviewItemBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  ratingReviewType: [TextOptionDefinition!]

  """Translation missing"""
  ratingNumber: Decimal

  """Translation missing"""
  ratingStatus: [TextOptionDefinition!]

  """RichTitle"""
  richTitle: String

  """RichText"""
  richText: String

  """Translation missing"""
  author: [Pointer!]

  """DateTime"""
  dateTime: DateTime

  """Translation missing"""
  loading: [TextOptionDefinition!]
}

"""Represents a receipt."""
type Receipt {
  order: Order!
  htmlSnippet: String
}

type Redirect {
  """The redirect url that should be used to redirect the client."""
  location: String!

  """Indicate if the redirect is a permanent redirect."""
  permanent: Boolean!
}

type Relationship implements IRelationshipItem {
  """The id of the relationship."""
  relationshipId: String!

  """The name of the relationship."""
  name: String

  """Get the items data for relationships."""
  items(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategoryOrProductConnection
}

"""Filter relationship."""
input RelationshipFilterInput {
  """Filter based on the id."""
  id: SimpleStringFilterInput
}

union RemoveAddressFromOrganizationError = Forbidden

input RemoveAddressFromOrganizationInput {
  """The organization id, omit to use selected organization."""
  organizationId: ID

  """The address system id."""
  addressId: ID!
}

type RemoveAddressFromOrganizationPayload {
  boolean: Boolean
  errors: [RemoveAddressFromOrganizationError!]
  query: StorefrontQuery!
}

union RemoveAddressFromPersonError = Forbidden

input RemoveAddressFromPersonInput {
  """The person id, omit to use current user."""
  personId: ID

  """The address id."""
  addressId: ID!
}

type RemoveAddressFromPersonPayload {
  boolean: Boolean
  errors: [RemoveAddressFromPersonError!]
  query: StorefrontQuery!
}

input RemoveDiscountCodesFromCartInput {
  codes: [String!]!
}

type RemoveDiscountCodesFromCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

union RemovePersonFromOrganizationError = Forbidden

input RemovePersonFromOrganizationInput {
  """The organization id."""
  organizationId: ID!

  """The person id."""
  personId: ID!
}

type RemovePersonFromOrganizationPayload {
  boolean: Boolean
  errors: [RemovePersonFromOrganizationError!]
  query: StorefrontQuery!
}

input RemoveVariantFromCartInput {
  rowId: String!
}

type RemoveVariantFromCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

union ResetUserPasswordError = Failure | Forbidden | ValidationError

input ResetUserPasswordInput {
  """The notification url that will be called when email is changed."""
  notificationUrl: String!

  """The login name for the user."""
  login: String!

  """The new password for the user."""
  password: String!

  """The token returned by resetUserPasswordVerification notification."""
  token: String!

  """The verification token notified in resetUserPasswordVerification."""
  verificationToken: String!
}

type ResetUserPasswordPayload {
  boolean: Boolean
  errors: [ResetUserPasswordError!]
  query: StorefrontQuery!
}

union ResetUserPasswordVerificationError = Failure | Forbidden | ValidationError

input ResetUserPasswordVerificationInput {
  """The login name for the user."""
  login: String!

  """The notification url that will be called for verification."""
  notificationUrl: String!
}

type ResetUserPasswordVerificationPayload {
  token: String
  errors: [ResetUserPasswordVerificationError!]
  query: StorefrontQuery!
}

type RestrictedCategoryItem implements Node & ICategoryItem & ITemplateInfo & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategoryConnection
  templateName: String
}

type RestrictedPageItem implements Node & IPageItem & ITemplateInfo & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection
  templateName: String
}

type RestrictedProductItem implements Node & IProductItem & ITemplateInfo & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The article number"""
  articleNumber: String!

  """The name."""
  name: String

  """The images."""
  images(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): [IImageItem!]!

  """The description."""
  description: String

  """If the item is in stock."""
  inStock: Boolean! @deprecated(reason: "Use StockStatus.InStockQuantity instead.")

  """Stock status information."""
  stockStatusDescription: String @deprecated(reason: "Use StockStatus.Description instead.")

  """Stock status."""
  stockStatus: StockStatus!

  """Calculated product price."""
  price: ProductPrice

  """Unit of measurement."""
  unitOfMeasurement: UnitOfMeasurement!
  isVariant: Boolean!
  templateName: String
}

type RichContentBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: RichContentBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type RichContentBlockFieldContainer {
  """Name"""
  _name: String

  """RichText"""
  richText: String

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]
}

"""Role definition."""
type Role implements Node {
  """Global Unique Id."""
  id: ID!

  """Role name."""
  name: String
}

"""Role operation definition."""
type RoleOperation {
  """Role operation id."""
  roleOperationId: String!

  """Role name."""
  name: String
}

type RowBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: RowBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: RowBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type RowBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  numberOfItemOnDesktop: Decimal

  """Translation missing"""
  numberOfItemOnMobile: Decimal

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  backgroundColorOpacity: Decimal

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  rowWidthOptionDesktop: [TextOptionDefinition!]

  """Translation missing"""
  rowWidthOptionMobile: [TextOptionDefinition!]

  """Translation missing"""
  blockHeight: Int

  """Translation missing"""
  contentSpaceX: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceXDesktop: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceY: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceYDesktop: [IntOptionDefinition!]
}

type RowBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type SearchContext {
  category: CategorySearchResultContext!
  product: ProductSearchResultContext!
  page: PageSearchResultContext!
}

"""Facet item."""
input SearchFacetItemInput {
  """Distinct facet item."""
  distinct: DistinctFacetItemInput

  """Range facet item."""
  range: RangeFacetItemInput
}

"""Match information inside field framework."""
input SearchFieldItemInput {
  stringValue: StringValueItemInput
  booleanValue: BooleanValueItemInput
  numberValue: DecimalValueItemInput
  dateTimeValue: DateTimeValueItemInput
}

input SearchQueryInput {
  text: String
  tags: [TagItemInputLegacy!]
  priceRanges: [PriceRangeInputLegacy!]
  newsDate: NewsDateInput
  category: [ID!]
  pageType: String
  pageSystemId: ID
  sortBy: SortByEnum
  sortDirection: SortDirectionEnum
  categorySystemId: UUID
  productListSystemId: UUID
  categoryShowRecursively: Boolean
  articleNumbers: [String]
  websiteSystemId: UUID
}

type SearchResultPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: SearchResultPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type SearchResultPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

input SearchSortItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!
  order: SearchSortOrder
}

enum SearchSortOrder {
  ASCENDING
  DESCENDING
}

type SecondaryNavigationLinkBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: SecondaryNavigationLinkBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type SecondaryNavigationLinkBlockFieldContainer {
  """Name"""
  _name: String

  """Navigation link"""
  navigationLink: LinkFieldDefinition
}

type SectionBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: SectionBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type SectionBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  paddingX: [IntOptionDefinition!]

  """Translation missing"""
  paddingXDesktop: [IntOptionDefinition!]

  """Translation missing"""
  paddingY: [IntOptionDefinition!]

  """Translation missing"""
  paddingYDesktop: [IntOptionDefinition!]
}

union SelectUserOrganizationError = Forbidden

input SelectUserOrganizationInput {
  """The organization system id. Use 'null' to unselect organization."""
  organizationId: ID
}

type SelectUserOrganizationPayload {
  authentication: authentication
  errors: [SelectUserOrganizationError!]
  query: StorefrontQuery!
}

enum ShippingIntegrationType {
  INLINE
  DELIVERY_CHECKOUT
  PAYMENT_CHECKOUT
  DELIVERY_OPTIONS
}

"""Represents a shipping option."""
type ShippingOption {
  """Name of shipping option."""
  name: String

  """Description of shipping option."""
  description: String

  """The image."""
  image(
    """The max dimension of the image."""
    max: SizeInput

    """The min dimension of the image."""
    min: SizeInput
  ): IImageItem

  """Price of shipping option."""
  price: Decimal

  """Flag to indicate if option is selected."""
  selected: Boolean!

  """Shipping integration type."""
  integrationType: ShippingIntegrationType!

  """Global Unique Id."""
  id: ID!
}

"""
The `Short` scalar type represents non-fractional signed whole 16-bit numeric
values. Short can represent values between -(2^15) and 2^15 - 1.
"""
scalar Short

union SignInUserError = AuthenticationFailure

input SignInUserInput {
  """The username for the user."""
  username: String!

  """The password for the user."""
  password: String!

  """The new password for the user when password change is required."""
  newPassword: String

  """Authentication result type."""
  type: AuthenticationResultType
}

type SignInUserPayload {
  authentication: authentication
  errors: [SignInUserError!]
  query: StorefrontQuery!
}

input SignOutUserInput {
  """Sign out all sessions on all devices."""
  allSessions: Boolean = false
}

type SignOutUserPayload {
  boolean: Boolean
  query: StorefrontQuery!
}

"""Match information inside simple text field."""
input SimpleStringFieldTermInput {
  """Value to match."""
  value: String

  """Boost hits on match."""
  boost: Float
}

"""Simple string filter."""
input SimpleStringFilterInput {
  """
  Filter operation.
  
  All operations are not implemented for all instances where this filter may be applied.
  
  Example operations.
  - eq - Equals filter.
  - ne - Not equals filter.
  - contains - Contains filter.
  - not-contains - Not contains filter.
  - starts-width - Starts width filter.
  - ends-width - Ends width filter.
  
  """
  operator: String!

  """Filter value."""
  value: String
}

type SiteSelectorPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: SiteSelectorPageFieldContainer!

  """The blocks for the page type."""
  blocks: SiteSelectorPageBlockContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type SiteSelectorPageBlockContainer {
  """The blocks for Main."""
  main: [IBlock]!
}

type SiteSelectorPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String
}

type Size {
  """The height of the image."""
  height: Int!

  """The width of the image."""
  width: Int!
}

input SizeInput {
  """The height of the image."""
  height: Int!

  """The width of the image."""
  width: Int!
}

type SliderBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: SliderBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: SliderBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field group."""
  displayFieldGroup: SliderBlockDisplayFieldGroups!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type SliderBlockDisplayFieldGroups {
  """Display field group: Column1"""
  column1: DisplayFieldGroup!

  """Display field group: Column2"""
  column2: DisplayFieldGroup!
}

type SliderBlockFieldContainer {
  """Name"""
  _name: String

  """Translation missing"""
  autoplay: Boolean

  """Translation missing"""
  autoplayDelayMs: String

  """Translation missing"""
  infinite: Boolean

  """Translation missing"""
  arrowsDesktop: Boolean

  """Translation missing"""
  arrowsMobile: Boolean

  """Translation missing"""
  arrowPosition: [TextOptionDefinition!]

  """Translation missing"""
  paginationDotsDesktop: Boolean

  """Translation missing"""
  paginationDotsMobile: Boolean

  """Translation missing"""
  paginationDotsOverlapDesktop: Boolean

  """Translation missing"""
  paginationDotsOverlapMobile: Boolean

  """Translation missing"""
  slidesPerViewDesktop: Decimal

  """Translation missing"""
  slidesPerViewMobile: Decimal

  """Translation missing"""
  slidesPerGroupDesktop: Decimal

  """Translation missing"""
  slidesPerGroupMobile: Decimal

  """Translation missing"""
  speedMs: Int

  """Translation missing"""
  centeredSlides: Boolean

  """Translation missing"""
  direction: [TextOptionDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  contentSpaceX: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceXDesktop: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceY: [IntOptionDefinition!]

  """Translation missing"""
  contentSpaceYDesktop: [IntOptionDefinition!]
}

type SliderBlockFieldDefinition {
  """Link text"""
  linkText: String

  """Image"""
  blockImagePointer: PointerMediaImageItem

  """Link to category"""
  bannerLinkToCategory: [PointerProductCategoryItem!]

  """Link to page"""
  bannerLinkToPage: [PointerPageItem!]

  """Link to product"""
  bannerLinkToProduct: [PointerProductItem!]

  """Call to action text"""
  actionText: String

  """Translation missing"""
  imageAltText: String

  """Translation missing"""
  sliderType: [TextOptionDefinition!]
}

type SliderBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type SliderBlockFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  sliderBlockFieldValues: [SliderBlockFieldDefinition!]
}

enum SortByEnum {
  NAME
  PRICE
  POPULAR
  RECOMMENDED
  RELEVANCE
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortDirectionEnum {
  ASCENDING
  DESCENDING
}

type SortResultItem {
  """Sort by"""
  field: String!

  """Sort direction"""
  direction: SortDirection!
  selected: Boolean!
}

"""Stock status for a product variant."""
type StockStatus {
  """In stock quantity of the product variant."""
  inStockQuantity: Decimal!

  """Description of the product variants stock status."""
  description: String
}

type StorefrontMutation {
  """
  Change current users password.
  Failure types: password_complexity, password_missmatch
  """
  changeMyPassword(input: ChangeMyPasswordInput!): ChangeMyPasswordPayload!

  """Verify email for change on the current user."""
  changeMyEmailVerification(input: ChangeMyEmailVerificationInput!): ChangeMyEmailVerificationPayload!

  """
  Change the current users email.
  Failure types: account_exists, expired_token, verification_token, wrong_user
  """
  changeMyEmail(input: ChangeMyEmailInput!): ChangeMyEmailPayload!

  """Verify login for user password reset."""
  resetUserPasswordVerification(input: ResetUserPasswordVerificationInput!): ResetUserPasswordVerificationPayload!

  """
  Reset user password.
  Failure types: expired_token, no_user, password_complexity, verification_token, wrong_email
  """
  resetUserPassword(input: ResetUserPasswordInput!): ResetUserPasswordPayload!

  """
  Manage a person in the organization. The person is attached to the organization with the specified roles.
  """
  managePersonInOrganization(input: ManagePersonInOrganizationInput!): ManagePersonInOrganizationPayload!

  """
  Remove a person from the organization. The person is disconnected from the organization.
  """
  removePersonFromOrganization(input: RemovePersonFromOrganizationInput!): RemovePersonFromOrganizationPayload!

  """
  Approve an order for the organization. The user must have permission to approve order.
  Failure types: wrong_order_id, approval_denied, already_approved
  """
  approveOrderForOrganization(input: ApproveOrderForOrganizationInput!): ApproveOrderForOrganizationPayload!

  """Manage a address for the person."""
  manageAddressForPerson(input: ManageAddressForPersonInput!): ManageAddressForPersonPayload!

  """Remove a address from the person."""
  removeAddressFromPerson(input: RemoveAddressFromPersonInput!): RemoveAddressFromPersonPayload!

  """Manage a address for the organization."""
  manageAddressForOrganization(input: ManageAddressForOrganizationInput!): ManageAddressForOrganizationPayload!

  """Remove a address from the organization."""
  removeAddressFromOrganization(input: RemoveAddressFromOrganizationInput!): RemoveAddressFromOrganizationPayload!

  """Update field values for the person."""
  updateFieldForPerson(input: UpdateFieldForPersonInput!): UpdateFieldForPersonPayload!

  """Update field values for the organization."""
  updateFieldForOrganization(input: UpdateFieldForOrganizationInput!): UpdateFieldForOrganizationPayload!
  createCheckoutSession(input: CreateCheckoutSessionInput!): CreateCheckoutSessionPayload!
  updateCheckoutOptions(input: UpdateCheckoutOptionsInput!): UpdateCheckoutOptionsPayload!
  updateCheckoutDetails(input: UpdateCheckoutDetailsInput!): UpdateCheckoutDetailsPayload!
  placeOrder: PlaceOrderPayload!
  createCart: CreateCartPayload!
  addVariantToCart(input: AddVariantToCartInput!): AddVariantToCartPayload!
  updateVariantInCart(input: UpdateVariantInCartInput!): UpdateVariantInCartPayload!
  removeVariantFromCart(input: RemoveVariantFromCartInput!): RemoveVariantFromCartPayload!
  addDiscountCodesToCart(input: AddDiscountCodesToCartInput!): AddDiscountCodesToCartPayload!
  removeDiscountCodesFromCart(input: RemoveDiscountCodesFromCartInput!): RemoveDiscountCodesFromCartPayload!
  updateCartDetails(input: UpdateCartDetailsInput!): UpdateCartDetailsPayload!
  clearCart: ClearCartPayload!
  validateCart(input: ValidateCartInput!): ValidateCartPayload!

  """Sign in the user with username and password."""
  signInUser(input: SignInUserInput!): SignInUserPayload!

  """Sign out the signed in user."""
  signOutUser(input: SignOutUserInput!): SignOutUserPayload!

  """Select the organzation on the user context."""
  selectUserOrganization(input: SelectUserOrganizationInput!): SelectUserOrganizationPayload!
}

type StorefrontQuery {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  channel: IChannel

  """Search for products."""
  productSearch(
    """Define the search query."""
    query: ProductSearchQueryInput!

    """
    Define the filter facets and their selected values.
    
    Special field for facets is using # as marker and the following special field exists:
    - #category - Distinct facets based on the categories the products belongs to.
    - #price - Range facets based on the price for the products.
    
    For other fields the field id should be used and the field need to be enable in search engine.
    For multifield the field id should use dot(.) as separator, eg: multifield.itemfield1.
    
    """
    facets: [SearchFacetItemInput!]

    """
    Define the sorting of the search result.
    
    Special field for sorting is using # as marker and the following special field exists:
    - #articleNumber - Sort based on the product article number.
    - #manual - Sort based on the manual sort order for products in category or product list.
    - #popular - Sort based on the purchase popularity.
    - #price - Sort based on the price.
    - #score - Sort based on the hit score for the query.
    
    For other fields the field id should be used and the field need to be enable in search engine.
    For multifield the field id should use dot(.) as separator, eg: multifield.itemfield1.
    
    """
    sortBy: [SearchSortItemInput!]

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ProductSearchConnection

  """Search for pages."""
  pageSearch(
    """Define the search query."""
    query: PageSearchQueryInput!

    """
    Define the filter facets and their selected values.
    
    For other fields the field id should be used and the field need to be enable in search engine.
    For multifield the field id should use dot(.) as separator, eg: multifield.itemfield1.
    
    """
    facets: [SearchFacetItemInput!]

    """
    Define the sorting of the search result.
    
    Special field for sorting is using # as marker and the following special field exists:
    - #manual - Sort based on the manual sort order for pages.
    - #score - Sort based on the hit score for the query.
    
    For other fields the field id should be used and the field need to be enable in search engine.
    For multifield the field id should use dot(.) as separator, eg: multifield.itemfield1.
    
    """
    sortBy: [SearchSortItemInput!]

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageSearchConnection
  search(
    """Query parameters"""
    query: SearchQueryInput!
  ): SearchContext! @deprecated(reason: "Use categorySearch, pageSearch or productSearch instead.")

  """Search for categories."""
  categorySearch(
    """Define the search query."""
    query: CategorySearchQueryInput!

    """
    Define the sorting of the search result.
    
    Special field for sorting is using # as marker and the following special field exists:
    - #manual - Sort based on the manual sort order for pages.
    - #score - Sort based on the hit score for the query.
    
    For other fields the field id should be used and the field need to be enable in search engine.
    For multifield the field id should use dot(.) as separator, eg: multifield.itemfield1.
    
    """
    sortBy: [SearchSortItemInput!]

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): CategorySearchConnection

  """Provides the roles applicable to customers organization person."""
  customerRoles: [Role!]!

  """Receipt for the cart or order."""
  receipt: Receipt
  preview: Preview

  """Order identifier."""
  order(orderId: String!): Order

  """Provides access to the current logged in person information."""
  me: CurrentUser

  """Provides to the address types for customers."""
  customerAddressTypes: [CustomerAddressType!]!
  content: IContent!

  """Checkout options."""
  checkout: Checkout

  """The cart."""
  cart: Cart!
}

"""Definition of search types."""
enum StringFieldSearchType {
  """Default."""
  DEFAULT

  """Ngram."""
  N_GRAM

  """Keyword."""
  KEYWORD

  """Keyword normalized to lowercase."""
  KEYWORD_LOWERCASE
}

"""Match information inside text field."""
input StringFieldTermInput {
  """Value to match."""
  value: String

  """Boost hits on match."""
  boost: Float

  """Configure fuzziness."""
  fuzziness: FuzzinessItemInput

  """Use synonym analyzer capability."""
  synonymAnalyzer: Boolean! = false

  """Type of search for this field that should be used."""
  searchType: StringFieldSearchType
}

type StringValue implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  stringValue: String
}

"""Match information inside text field."""
input StringValueItemInput {
  """
  Field. Use dot (.) as separator for multifield, eg: multifield.itemfield1.
  """
  field: String!

  """Value to match."""
  value: String

  """Boost hits on match."""
  boost: Float

  """Configure fuzziness."""
  fuzziness: FuzzinessItemInput

  """Use synonym analyzer capability."""
  synonymAnalyzer: Boolean! = false

  """Type of search for this field that should be used."""
  searchType: StringFieldSearchType
}

type StringValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  stringValues: [String]
}

type SubscribeBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: SubscribeBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type SubscribeBlockFieldContainer {
  """Name"""
  _name: String

  """RichText"""
  richText: String

  """Translation missing"""
  subscribeInputText: String

  """Translation missing"""
  placeholderText: String

  """Translation missing"""
  button: [ButtonBlockFieldDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  cssClass: String

  """Translation missing"""
  blockHeight: Int
}

input TagItemInputLegacy {
  """Tag name"""
  key: String!

  """Tag values"""
  value: [String!]!
}

type TextImageBlockBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: TextImageBlockBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field group."""
  fieldGroup: TextImageBlockBlockFieldGroups!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type TextImageBlockBlockFieldContainer {
  """Name"""
  _name: String

  """Image"""
  blockImagePointer: PointerMediaImageItem

  """Link"""
  link: [PointerPageItem!]

  """Link text"""
  linkText: String

  """RichText"""
  richText: String
}

type TextImageBlockBlockFieldGroups {
  """Field group: General"""
  general: FieldGroup!
}

type TextOptionDefinition {
  value: String!
  name: String
}

type TextOptionFieldValues implements IFieldValueItem {
  """Global Unique Id."""
  id: ID!

  """Field id."""
  field: String!

  """Field name."""
  name: String
  fieldMetadata: IFieldMetadataItem!

  """The field data."""
  textOptionFieldValues: [TextOptionDefinition!]
}

type TextOptions {
  multiSelect: Boolean!
  items: [TextOptionsItem!]!
}

type TextOptionsItem {
  value: String!
  name: String
}

"""The `TimeSpan` scalar represents an ISO-8601 compliant duration type."""
scalar TimeSpan

type TopHeaderBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: TopHeaderBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type TopHeaderBlockFieldContainer {
  """Name"""
  _name: String

  """Option"""
  position: [TextOptionDefinition!]

  """RichText"""
  richText: String

  """Translation missing"""
  backgroundColorHex: String

  """Translation missing"""
  links: [LinksBlockFieldDefinition!]
}

type TopHeaderContainerBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: TopHeaderContainerBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type TopHeaderContainerBlockFieldContainer {
  """Name"""
  _name: String
}

"""Represents a unit of measurement."""
type UnitOfMeasurement {
  """Unit of measurement id."""
  id: String! @deprecated(reason: "Use unitOfMeasurementId instead.")

  """Unit of measurement id."""
  unitOfMeasurementId: String!

  """Unit of measurement name."""
  name: String

  """Decimal digits for unit of measurement."""
  decimalDigits: Decimal!
}

input UpdateCartDetailsInput {
  country: String
  showPricesIncludingVat: Boolean
}

type UpdateCartDetailsPayload {
  cart: Cart
  query: StorefrontQuery!
}

input UpdateCheckoutDetailsInput {
  additionalInfo: [KeyValuePairOfStringAndStringInput!]
  billingAddress: OrderAddressInput
  customer: OrderCustomerDetailsInput
  note: String
  shippingAddress: OrderAddressInput
  shippingWidgetData: String
  deliveryOptions: [DeliveryOptionInput!]
}

type UpdateCheckoutDetailsPayload {
  checkout: Checkout
  query: StorefrontQuery!
}

input UpdateCheckoutOptionsInput {
  shippingOptionId: ID
  paymentOptionId: ID
}

type UpdateCheckoutOptionsPayload {
  checkout: Checkout
  query: StorefrontQuery!
}

union UpdateFieldForOrganizationError = Forbidden | FieldUpdateError | ValidationError

input UpdateFieldForOrganizationInput {
  """The organization id, omit to use selected organization."""
  organizationId: ID

  """The items to update"""
  items: [FieldValueUpdateInput!]!
}

type UpdateFieldForOrganizationPayload {
  organization: IOrganizationItem
  errors: [UpdateFieldForOrganizationError!]
  query: StorefrontQuery!
}

union UpdateFieldForPersonError = Forbidden | FieldUpdateError | ValidationError

input UpdateFieldForPersonInput {
  """The person id, omit to use current user."""
  personId: ID

  """The items to update"""
  items: [FieldValueUpdateInput!]!
}

type UpdateFieldForPersonPayload {
  person: IPersonItem
  errors: [UpdateFieldForPersonError!]
  query: StorefrontQuery!
}

input UpdateVariantInCartInput {
  rowId: String!
  quantity: Decimal
  additionalInfo: [KeyValuePairOfStringAndStringInput!]
}

type UpdateVariantInCartPayload {
  cart: Cart
  query: StorefrontQuery!
}

scalar UUID

input ValidateCartInput {
  """Include technical details in the error."""
  includeDetails: Boolean = false
}

type ValidateCartPayload {
  validationError: [ValidationError!]
  query: StorefrontQuery!
}

"""Validation error."""
type ValidationError implements Error {
  """Validation message."""
  message: String!
}

"""Represents a VAT detail."""
type VatDetail {
  """VAT rate."""
  vatRate: Decimal!

  """Amount for this VAT detail."""
  amountIncludingVat: Decimal!

  """VAT."""
  vat: Decimal!
}

type VideoBlock implements ITemplateInfo & IBlockItem {
  """Display template."""
  templateName: String
  systemId: UUID!

  """The field data."""
  fields: VideoBlockFieldContainer!

  """The child blocks for the block type."""
  children: [IBlock]

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type VideoBlockFieldContainer {
  """Name"""
  _name: String

  """RichText"""
  richText: String

  """Video"""
  blockVideo: [PointerMediaVideoItem!]

  """Translation missing"""
  videoPlayOption: [TextOptionDefinition!]

  """Translation missing"""
  commonStyles: [CommonStylesBlockFieldDefinition!]

  """Translation missing"""
  loading: [TextOptionDefinition!]
}

type WebsiteText {
  """The key for the website text."""
  key: String!

  """The value for the website text."""
  value: String
}

type WelcomeEmailPage implements Node & ITemplateInfo & IPageItem & IContentItem {
  """The url."""
  url(
    """Define if absolute url should be generated."""
    absoluteUrl: Boolean
  ): String

  """The metadata for the content."""
  metadata: Metadata!

  """Get the parent for this item."""
  parent(
    """
    The level of parent that should be fetched. Use negative values for relative
    level and traverse backwards from the current item, use positive values for
    absolute level and traverse from the root item.
    """
    level: Int
  ): IContent

  """Get the parents for this item."""
  parents(
    """Reverse the result."""
    reverse: Boolean

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): ContentConnection

  """Global Unique Id."""
  id: ID!

  """The name."""
  name: String

  """Display template."""
  templateName: String

  """Get the children for this item."""
  children(
    includeRestrictedItems: Boolean = false

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String
  ): PageOrCategoryConnection

  """The field data."""
  fields: WelcomeEmailPageFieldContainer!

  """The field groups."""
  fieldGroups(filter: FieldGroupFilterInput): [FieldGroup!]!

  """The display field groups."""
  displayFieldGroups(filter: FieldGroupFilterInput): [DisplayFieldGroup!]!
}

type WelcomeEmailPageFieldContainer {
  """Name"""
  _name: String

  """Url"""
  _url: String

  """Subject"""
  welcomeEmailSubject: String

  """Welcome email text"""
  welcomeEmailText: String
}

